<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 macOS 上使用 TouchID 來驗證 sudo 密碼</title>
      <link href="/blog/2021/07/25/macOS-use-touchID-to-authenticate-sudo/"/>
      <url>/blog/2021/07/25/macOS-use-touchID-to-authenticate-sudo/</url>
      
        <content type="html"><![CDATA[<p>當 mac 密碼安全性很高 <del>(aka 又臭又長)</del> 時，sudo 打起密碼來就比較費時 <img src="/blog/2021/07/25/macOS-use-touchID-to-authenticate-sudo/sudo-request-password.png" class="inline" width="480"></p><p>因此我們可以使用 TouchID 來取代這件事</p><span id="more"></span><ol><li><p>透過 Terminal 編輯 <code>/etc/pam.d/sudo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/pam.d/sudo</span></span><br></pre></td></tr></table></figure><p>或許這是最後一次在 Terminal 輸入 sudo 密碼了 😆<br>Note: <em>PAM = <strong>P</strong>luggable <strong>A</strong>uthentication <strong>M</strong>odule</em></p></li><li><p>檔案看起來應該會像下面這樣，列出所有 sudo 可用的驗證方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo: auth account password session</span></span><br><span class="line">auth       sufficient     pam_smartcard.so</span><br><span class="line">auth       required       pam_opendirectory.so</span><br><span class="line">account    required       pam_permit.so</span><br><span class="line">password   required       pam_deny.so</span><br><span class="line">session    required       pam_permit.so</span><br></pre></td></tr></table></figure><p>我們在檔案第二行加入 TouchID (下方的 <code>pam_tid.so</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo: auth account password session</span></span><br><span class="line">auth       sufficient     pam_tid.so</span><br><span class="line">auth       sufficient     pam_smartcard.so</span><br><span class="line">auth       required       pam_opendirectory.so</span><br><span class="line">account    required       pam_permit.so</span><br><span class="line">password   required       pam_deny.so</span><br><span class="line">session    required       pam_permit.so</span><br></pre></td></tr></table></figure></li><li><p>接著存檔離開 (先按 <code>Esc</code> 後，再按 <code>wq!</code>)</p></li><li><p>開啟新的 Terminal 視窗確認結果 🎉</p><img src="/blog/2021/07/25/macOS-use-touchID-to-authenticate-sudo/sudo-request-touchid.png" class="inline" width="480"><p>當然這時候如果按了 Cancel，那一樣會彈出原本要你手動輸入密碼的提示</p></li></ol><p>–<br>macOS Sonoma 之後 <code>/etc/pam.d/sudo</code> 這個檔案會被系統自動還原</p><p>因此我們改為使用 <code>/etc/pam.d/sudo_local</code> 這個檔案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cp /etc/pam.d/sudo_local.template /etc/pam.d/sudo_local</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/pam.d/sudo_local</span></span><br></pre></td></tr></table></figure><p>檔案內容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo_local: local config file which survives system update and is included for sudo</span><br><span class="line"># uncomment following line to enable Touch ID for sudo</span><br><span class="line">#auth       sufficient     pam_tid.so</span><br></pre></td></tr></table></figure><p>我們只要把第三行 <code>pam_tid.so</code> 註解打開即可，因此修改後的內容會長這樣</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo_local: local config file which survives system update and is included for sudo</span><br><span class="line"># uncomment following line to enable Touch ID for sudo</span><br><span class="line">auth       sufficient     pam_tid.so</span><br></pre></td></tr></table></figure><p>開啟新的 Terminal 視窗確認結果即可 🎉🎉</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> TouchID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ 修改 Git commit 紀錄</title>
      <link href="/blog/2019/03/06/intellij-reword-git-commit/"/>
      <url>/blog/2019/03/06/intellij-reword-git-commit/</url>
      
        <content type="html"><![CDATA[<p>當要修改最後一次 commit 紀錄時，直覺反應就是 <code>git commit --amend</code></p><p>但由於 <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> Git 整合度非常高，幾乎絕大部分操作都能透過 GUI 完成</p><p>以下介紹幾種在 IntelliJ 內修改 Git commit 紀錄的作法 (以 2018.3 為例)</p><p>情境：修改 commit log <code>Commit 3</code></p><img src="/blog/2019/03/06/intellij-reword-git-commit/commit-logs.jpg" class="inline"><span id="more"></span><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><h3 id="使用內建-Terminal"><a href="#使用內建-Terminal" class="headerlink" title="使用內建 Terminal"></a>使用內建 Terminal</h3><ol><li>確定 Terminal 已啟用 <img src="/blog/2019/03/06/intellij-reword-git-commit/enable-plugins.jpg" class="inline"></li><li>透過 <code>Alt + F12</code> 開啟 Terminal</li><li>輸入 <code>git commit --amend</code><img src="/blog/2019/03/06/intellij-reword-git-commit/terminal-cmd.jpg" class="inline"></li><li>接下來就是 vi 畫面，按下小寫 i 後可以編輯內容；編輯完畢後按 <code>Esc</code>，接著輸入 <code>:wq</code> 即可儲存離開 <img src="/blog/2019/03/06/intellij-reword-git-commit/git-vi.jpg" class="inline"></li></ol><p><del>結果第一個就是打指令 (毆)</del></p><h3 id="Commit-時勾選-Amend-commit"><a href="#Commit-時勾選-Amend-commit" class="headerlink" title="Commit 時勾選 Amend commit"></a>Commit 時勾選 Amend commit</h3><p>勾選 Amend commit 重新 commit 即可，不過限制檔案內容有修改過 <img src="/blog/2019/03/06/intellij-reword-git-commit/commit-changes.jpg" class="inline"></p><p><del>你也可以選擇 Amend commit 兩次，例如把上圖的 <code>Commit3</code> &gt; <code>Commit31</code> &gt; <code>Commit3</code>，並打上要修正的 commit 紀錄 (超大誤)</del></p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><h3 id="透過-Git-rebase"><a href="#透過-Git-rebase" class="headerlink" title="透過 Git rebase"></a>透過 Git rebase</h3><ol><li>VCS &gt; Git &gt; Rebase… <img src="/blog/2019/03/06/intellij-reword-git-commit/menu-git-rebase.jpg" class="inline"></li><li>勾選 Interactive，並且 Onto 設定為 <code>HEAD~</code><br><img src="/blog/2019/03/06/intellij-reword-git-commit/git-rebase.jpg" class="inline"></li><li>於 Action 選擇 <code>reword</code> 後點選 Start Rebasing<br><img src="/blog/2019/03/06/intellij-reword-git-commit/rebasing-commits.jpg" class="inline"></li><li>輸入要修正的 Commit 內容後點選 Resume Rebasing<br><img src="/blog/2019/03/06/intellij-reword-git-commit/additional-rebase-input.jpg" class="inline"></li></ol><h3 id="透過-Version-Control-reword"><a href="#透過-Version-Control-reword" class="headerlink" title="透過 Version Control reword"></a>透過 Version Control reword</h3><ol><li>View &gt; Tool Windows &gt; Version Control (或透過 <code>Alt + 9</code> 開啟)<img src="/blog/2019/03/06/intellij-reword-git-commit/menu-version-control.jpg" class="inline"></li><li>右鍵 &gt; Reword… (或透過 <code>F2</code>)<img src="/blog/2019/03/06/intellij-reword-git-commit/version-control-reword.jpg" class="inline"></li><li>輸入要修正的 Commit 內容後點選 OK<br><img class="inline reword-commit.jpg"></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然 IntelliJ 提供精美 GUI 幫助我們，但本質上還是 Git 指令 (是個易學難精的版控😂)<br>推薦兩位大神的精美文章－</p><ul><li><a href="https://blog.miniasp.com/">Will 保哥</a> － <a href="https://github.com/doggy8088/Learn-Git-in-30-days">30 天精通 Git 版本控管</a> </li><li><a href="https://kaochenlong.com/">高見龍</a> － <a href="https://gitbook.tw/">為你自己學 Git</a></li></ul><p>底下則是本篇文章運用到的 Git 指令</p><h3 id="有關-git-commit-amend"><a href="#有關-git-commit-amend" class="headerlink" title="有關 git commit --amend"></a>有關 git commit --amend</h3><ul><li><a href="https://git-scm.com/docs/git-commit#git-commit---amend"><code>git commit --amend</code></a></li><li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/18.md">修正 commit 過的版本歷史紀錄 Part 1 ( reset, amend )</a></li><li><a href="https://gitbook.tw/chapters/using-git/amend-commit1.html">【狀況題】修改 Commit 紀錄</a></li></ul><h3 id="有關-git-rebase"><a href="#有關-git-rebase" class="headerlink" title="有關 git rebase"></a>有關 git rebase</h3><ul><li><a href="https://git-scm.com/docs/git-rebase#git-rebase--i"><code>git rebase -i</code></a></li><li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/23.md">修正 commit 過的版本歷史紀錄 Part 5 ( rebase -i )</a></li><li><a href="https://gitbook.tw/chapters/branch/merge-with-rebase.html">另一種合併方式（使用 rebase）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> IntelliJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenJDK PKIX path building failed</title>
      <link href="/blog/2018/11/03/PKIX-path-building-failed/"/>
      <url>/blog/2018/11/03/PKIX-path-building-failed/</url>
      
        <content type="html"><![CDATA[<p>故事是這樣子的，小弟用 <a href="https://www.rainlendar.net/cms/index.php">Rainlendar</a> + GCALDaemon + Windows排程 同步 Google 行事曆</p><p><em>其實 Rainlendar Pro 就有同步功能，€9.95</em><br><em>GCALDaemon 目前在 sourceforge 已經找不到了…Orz</em><br><em>還好 Github 還有 <a href="https://github.com/LancelotLiu">LancelotLiu</a> Fork 的版本 <a href="https://github.com/LancelotLiu/GCALDaemon">GCALDaemon</a></em></p><p>原本用 OracleJDK 都順順同步，直到前陣子換了 OpenJDK 在同步時卻噴出以下錯誤</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">2018-11-03 11:06:25 | ERROR | GCalUtilitiesV3 | Unable to load calendar!</span><br><span class="line">  [1 ] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">  [2 ] at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)</span><br><span class="line">  [3 ] at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1964)</span><br><span class="line">  [4 ] at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:328)</span><br><span class="line">  [5 ] at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:322)</span><br><span class="line">  [6 ] at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1614)</span><br><span class="line">  [7 ] at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)</span><br><span class="line">  [8 ] at sun.security.ssl.Handshaker.processLoop(Handshaker.java:1052)</span><br><span class="line">  [9 ] at sun.security.ssl.Handshaker.process_record(Handshaker.java:987)</span><br><span class="line">  [10] at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1072)</span><br><span class="line">  [11] at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1385)</span><br><span class="line">  [12] at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:757)</span><br><span class="line">  [13] at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:123)</span><br><span class="line">  [14] at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)</span><br><span class="line">  [15] at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)</span><br><span class="line">  [16] at org.apache.commons.httpclient.HttpConnection.flushRequestOutputStream(HttpConnection.java:825)</span><br><span class="line">  [17] at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter.flushRequestOutputStream(MultiThreadedHttpConnectionManager.java:1543)</span><br><span class="line">  [18] at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:1920)</span><br><span class="line">  [19] at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1002)</span><br><span class="line">  [20] at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:382)</span><br><span class="line">  [21] at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:168)</span><br><span class="line">  [22] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:393)</span><br><span class="line">  [23] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)</span><br><span class="line">  [24] at org.gcaldaemon.core.GCalUtilitiesV3.loadCalendar(GCalUtilitiesV3.java:299)</span><br><span class="line">  [25] at org.gcaldaemon.core.GCalUtilities.loadCalendar(GCalUtilities.java:196)</span><br><span class="line">  [26] at org.gcaldaemon.core.Configurator.synchronizeNow(Configurator.java:1016)</span><br><span class="line">  [27] at org.gcaldaemon.core.file.OfflineFileListener.run(OfflineFileListener.java:61)</span><br><span class="line">  [28] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">  [29] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:397)</span><br><span class="line">  [30] at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:302)</span><br><span class="line">  [31] at sun.security.validator.Validator.validate(Validator.java:262)</span><br><span class="line">  [32] at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)</span><br><span class="line">  [33] at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)</span><br><span class="line">  [34] at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)</span><br><span class="line">  [35] at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1596)</span><br><span class="line">  [36] ... 21 more</span><br><span class="line">  [37] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">  [38] at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)</span><br><span class="line">  [39] at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)</span><br><span class="line">  [40] at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)</span><br><span class="line">  [41] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:392)</span><br><span class="line">  [42] ... 27 more</span><br></pre></td></tr></table></figure><p>通常這錯誤是憑證認證上發生問題，經過比較以後發現 OpenJDK 的 cacerts 確實少了 Google 憑證鏈的 Root CA憑證 (根憑證)</p><img src="/blog/2018/11/03/PKIX-path-building-failed/diff.jpg" class="inline"><h3 id="匯出-根憑證"><a href="#匯出-根憑證" class="headerlink" title="匯出 根憑證"></a>匯出 根憑證</h3><ol><li><p>Chrome 連至 <a href="https://www.google.com/">https://www.google.com/</a> &gt; 點選網址左邊鎖頭 &gt; 憑證 <img src="/blog/2018/11/03/PKIX-path-building-failed/export-root-ca-step1.jpg" class="inline"></p></li><li><p>憑證路徑 &gt; 點選最上層根憑證 (即 Google Trust Services - GlobalSign Root CA-R2) &gt; 檢視憑證 <img src="/blog/2018/11/03/PKIX-path-building-failed/export-root-ca-step2.jpg" class="inline"></p></li><li><p>詳細資料 &gt; 複製到檔案 <img src="/blog/2018/11/03/PKIX-path-building-failed/export-root-ca-step3.jpg" class="inline"> 接著按照憑證匯出精靈一步一步匯出憑證，這邊取名為 <code>globalsignr2ca.cer</code></p></li></ol><h3 id="匯入-根憑證"><a href="#匯入-根憑證" class="headerlink" title="匯入 根憑證"></a>匯入 根憑證</h3><h4 id="方法A-使用-Java-keytool"><a href="#方法A-使用-Java-keytool" class="headerlink" title="方法A: 使用 Java keytool"></a>方法A: 使用 Java <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html">keytool</a></h4><p>  <code>keytool -import -alias globalsignr2ca -keystore  %JAVA_HOME%/jre/lib/security/cacerts -file globalsignr2ca.cer</code></p><h4 id="方法B-使用-KeyStore-Explorer"><a href="#方法B-使用-KeyStore-Explorer" class="headerlink" title="方法B: 使用 KeyStore Explorer"></a>方法B: 使用 <a href="https://keystore-explorer.org/">KeyStore Explorer</a></h4><ol><li>開啟 <a href="https://keystore-explorer.org/">KeyStore Explorer</a>，並點選 “Open an existing KeyStore”，選擇要匯入的 cacerts 若要修改 JAVA_HOME 的可以直接點選  “Open the CA Certificates KeyStore”<img src="/blog/2018/11/03/PKIX-path-building-failed/kse-import-step1.jpg" class="inline"></li><li>輸入 cacerts 密碼，預設應為 <code>changeit</code></li><li>點選 “Import Trusted Certificate” 選擇剛剛匯出的根憑證 <img src="/blog/2018/11/03/PKIX-path-building-failed/kse-import-step3.jpg" class="inline"></li><li>KeyStore 顯示憑證內容，確認無誤後按 OK <img src="/blog/2018/11/03/PKIX-path-building-failed/kse-import-step4.jpg" class="inline"></li><li>KeyStore 詢問是否接受此為信賴憑證，點選 是 <img src="/blog/2018/11/03/PKIX-path-building-failed/kse-import-step5.jpg" class="inline"></li><li>要求輸入 alias，輸入 <code>globalsignr2ca</code><img src="/blog/2018/11/03/PKIX-path-building-failed/kse-import-step6.jpg" class="inline"></li></ol><p>再次執行 GCALDaemon 確認可以正常同步了 🎉</p><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/LancelotLiu/GCALDaemon">GCALDaemon</a><ul><li>Fork from <a href="http://gcaldaemon.sourceforge.net/">http://gcaldaemon.sourceforge.net/</a> by <a href="https://github.com/LancelotLiu">LancelotLiu</a></li></ul></li><li><a href="https://stackoverflow.com/questions/21076179/pkix-path-building-failed-and-unable-to-find-valid-certification-path-to-requ">StackOverflow -“PKIX path building failed” and “unable to find valid certification path to requested target”</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html">keytool</a> </li><li><a href="https://keystore-explorer.org/">KeyStore Explorer</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OpenJDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 2.0 升級至 6.0</title>
      <link href="/blog/2018/07/01/Angular-migrate-from-2-x/"/>
      <url>/blog/2018/07/01/Angular-migrate-from-2-x/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="/blog/2017/04/25/Maven-Angular-integration/" title="透過 Maven 整合 Angular 專案">透過 Maven 整合 Angular 專案</a> 當時還是使用 Angular 2.4 版</p><p>隨著今年 5 月 Angular 6 的正式發佈，當然程式也要做出相對應升級</p><p>官方提供了 <a href="https://update.angular.io/">Angular 升級指南</a>，點選 從哪個版本升到哪個版本 以及 專案複雜度 後，即會列出一份 TODO 清單</p><span id="more"></span><img src="/blog/2018/07/01/Angular-migrate-from-2-x/update-guide.jpg" class="inline"><p>不過官方並不建議一次跨太多版本，所以還是乖乖從 2.4 -&gt; 4.0 -&gt; 5.0 -&gt; 6.0 這樣逐步升版</p><h3 id="逐步升級-Angular-版本"><a href="#逐步升級-Angular-版本" class="headerlink" title="逐步升級 Angular 版本"></a>逐步升級 Angular 版本</h3><h4 id="2-4-gt-4-0"><a href="#2-4-gt-4-0" class="headerlink" title="2.4 -&gt; 4.0"></a>2.4 -&gt; 4.0</h4><ol><li>確保沒有使用 <code>extends</code> 任何 Angular 生命週期介面 (如 <code>OnInit</code>)，而是應該正確使用 <code>implements</code><br>結果發現當初寫的範例根本沒有 extends / implements (遮臉)，那就快修正 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/blob/master/front/src/app/app.component.ts#L9">app.component.ts</a></li><li>更新相依性<br><code>npm install @angular/animations@^4.0.0 @angular/common@^4.0.0 @angular/compiler@^4.0.0 @angular/compiler-cli@^4.0.0 @angular/core@^4.0.0 @angular/forms@^4.0.0 @angular/http@^4.0.0 @angular/platform-browser@^4.0.0 @angular/platform-browser-dynamic@^4.0.0 @angular/platform-server@^4.0.0 @angular/router@^4.0.0 typescript@2.4.0 rxjs@^5.0.1 zone.js@^0.8.4</code></li></ol><h4 id="4-0-gt-5-0"><a href="#4-0-gt-5-0" class="headerlink" title="4.0 -&gt; 5.0"></a>4.0 -&gt; 5.0</h4><ol><li>更新相依性<br><code>npm install @angular/animations@^5.0.0 @angular/common@^5.0.0 @angular/compiler@^5.0.0 @angular/compiler-cli@^5.0.0 @angular/core@^5.0.0 @angular/forms@^5.0.0 @angular/http@^5.0.0 @angular/platform-browser@^5.0.0 @angular/platform-browser-dynamic@^5.0.0 @angular/platform-server@^5.0.0 @angular/router@^5.0.0 typescript@2.4.2 rxjs@^5.5.2</code></li><li>將 <code>HttpModule</code> 及 <code>Http</code> 服務元件改為 <code>HttpClientModule</code> 及 <code>HttpClient</code><ul><li><a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/blob/master/front/src/app/app.module.ts#L20"><code>app.module.ts</code></a> 改為匯入 <code>HttpClientModule</code></li><li><a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/blob/master/front/src/app/app.component.ts#L12"><code>app.component.ts</code></a> 改為注入 <code>HttpClient</code><br>  此外也不再需要自己做 json 轉換了!</li></ul></li></ol><h4 id="5-0-gt-6-0"><a href="#5-0-gt-6-0" class="headerlink" title="5.0 -&gt; 6.0"></a>5.0 -&gt; 6.0</h4><ol><li>先確認 NodeJS 使用 8 (或之後)的版本</li><li>更新 Angular CLI 版本 (global &amp; local)<br> <code>npm install -g @angular/cli@latest</code><br> <code>npm install @angular/cli@latest</code><br> <code>ng update @angular/cli</code><br> Angular CLI 從原本 <code>.angular-cli.json</code> 改名成 <code>angular.json</code></li><li>更新 codelyzer 版本<br> <code>npm install codelyzer@~4.2.0</code></li><li>更新 Angular / TypeScript / RxJS 版本<br> <strong>Angular 6 必須搭配 TypeScript 2.7 及 RxJS 6</strong><br> <code>ng update @angular/core</code></li><li>檢查是否尚有其他相依性未更新<br> <code>ng update</code> </li><li>修改 RxJS 6 deprecated 的功能 <a href="https://github.com/ReactiveX/rxjs-tslint">rxjs-tslint auto update rules</a><br> <code>npm install -g rxjs-tslint</code><br> <code>rxjs-5-to-6-migrate -p src/tsconfig.json</code></li><li>修改完後刪除 <code>rxjs-compat</code><br> <code>npm uninstall rxjs-compat</code></li></ol><p><del>當然如果不想做這麼多步驟，也可以用 Angular CLI 重新 <code>ng new</code> 一個 project，再把原本的程式碼丟進去就好 (逃)</del></p><h3 id="修改-angular-json"><a href="#修改-angular-json" class="headerlink" title="修改 angular.json"></a>修改 angular.json</h3><p>將 <code>sample-project-e2e</code> 進行以下修改，避免 Angular CLI 無法正確將 component / service / class 放到 src 下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;sample-project-e2e&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;e2e/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sourceRoot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-Angular-httpClient-程式的-base-url"><a href="#修改-Angular-httpClient-程式的-base-url" class="headerlink" title="修改 Angular httpClient 程式的 base url"></a>修改 Angular httpClient 程式的 base url</h3><ol><li>建立 APIInterceptor 服務元件 <code>ng g s api-interceptor</code></li><li>實作 <a href="https://angular.io/api/common/http/HttpInterceptor">HttpInterceptor</a> 的 <a href="https://angular.io/api/common/http/HttpInterceptor#intercept">intercept</a> 方法 若是 production 環境下，則將 <a href="https://angular.io/api/common/http/HttpRequest">HttpRequest</a> URL 加上 context path <img src="/blog/2018/07/01/Angular-migrate-from-2-x/api-interceptor.jpg" class="inline"></li><li>修改 <code>app.module.ts</code> 透過 DI 方式注入 APIInterceptor 元件 <img src="/blog/2018/07/01/Angular-migrate-from-2-x/app-module.jpg" class="inline"></li></ol><h3 id="透過-Maven-打包-amp-執行"><a href="#透過-Maven-打包-amp-執行" class="headerlink" title="透過 Maven 打包 &amp; 執行"></a>透過 Maven 打包 &amp; 執行</h3><p>可參考之前文章 <a href="/blog/2017/04/25/Maven-Angular-integration/" title="透過 Maven 整合 Angular 專案">透過 Maven 整合 Angular 專案</a></p><span style="font-size: 1.3em;font-weight:bold;">程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration2">Angular-SpringMVC-Integration</a></span>(原本 2.4 版本移到分支 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/tree/angular2.x">angular2.x</a>)<hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://alligator.io/angular/angular-6/">Angular 6: Upgrading &amp; Summary of New Features</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆疊</title>
      <link href="/blog/2018/02/20/ds-stack/"/>
      <url>/blog/2018/02/20/ds-stack/</url>
      
        <content type="html"><![CDATA[<h2 id="後進先出-LIFO，Last-In-First-Out"><a href="#後進先出-LIFO，Last-In-First-Out" class="headerlink" title="後進先出 (LIFO，Last In First Out)"></a>後進先出 (LIFO，Last In First Out)</h2><p>同樣屬於資料結構的一種，但是限制了數據的存取方式，必須由上而下依序由新而舊存取</p><p>工廠將餅乾(數據)依序放入餅乾盒(堆疊)內，消費者必須先將後面放入的餅乾(數據)取出才能吃到(存取)下層的餅乾(數據)</p><img src="https://cdn.pixabay.com/photo/2018/11/02/17/20/cookie-3790631_1280.jpg" class="inline" width="250"><span id="more"></span><p>又或者是書堆，最下面的書不易取得閱讀 (因此實際生活上我們書會採用<a href="/blog/2018/01/25/ds-array/" title="陣列">陣列</a>方式擺放，而不是堆疊XD)</p><img src="https://pic.pimg.tw/koeorsyow/8f12bdaedc9256a34329247138697781.jpg" class="inline" width="250"><h2 id="Stack-示意圖"><a href="#Stack-示意圖" class="headerlink" title="Stack 示意圖"></a>Stack 示意圖</h2><ol><li>目前僅有 Blue 存放於堆疊中</li><li>堆疊最頂端稱之為 Top<br><img src="/blog/2018/02/20/ds-stack/stack.png" class="inline"></li></ol><h2 id="新增數據-推入-Push"><a href="#新增數據-推入-Push" class="headerlink" title="新增數據 - 推入 (Push)"></a>新增數據 - 推入 (Push)</h2><p>將數據新增到堆疊中，稱為「推入 (Push)」，以下圖動畫為例，依序推入 Red、Yellow <img src="/blog/2018/02/20/ds-stack/push.gif" class="inline"></p><h2 id="取出數據-彈出-Pop"><a href="#取出數據-彈出-Pop" class="headerlink" title="取出數據 - 彈出 (Pop)"></a>取出數據 - 彈出 (Pop)</h2><p>將數據從堆疊中取出，稱為「彈出 (Pop)」，以下圖動畫為例，依序彈出 Yellow、Red (記得 LIFO 原則)</p><img src="/blog/2018/02/20/ds-stack/pop.gif" class="inline"><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">Stack (abstract data type)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陣列</title>
      <link href="/blog/2018/01/25/ds-array/"/>
      <url>/blog/2018/01/25/ds-array/</url>
      
        <content type="html"><![CDATA[<h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引 (Index)"></a>索引 (Index)</h2><p>相較於<a href="/blog/2018/01/21/ds-list/" title="列表 (List)">列表 (List)</a>分散儲存於各個記憶體區塊，陣列則是將所有數據排在連續區塊。 不透過指標存取數據，而是透過<strong>索引</strong>存取 (由 0 開始)，因此要存取 Red 則是透過 <code>a[2]</code></p><img src="/blog/2018/01/25/ds-array/array.png" class="inline"><span id="more"></span><p>陣列中，數據需要連續儲存於記憶體中 <img src="/blog/2018/01/25/ds-array/memory.png" class="inline"></p><h2 id="隨機存取-random-access"><a href="#隨機存取-random-access" class="headerlink" title="隨機存取 (random access)"></a>隨機存取 (random access)</h2><p>因為數據被連續儲存，所以能透過索引來存取各數據，例如 <code>a[2]</code> 存取 Red</p><p>雖然數據讀取上較 List 方便，但是在增加數據或刪除數據上則須付出相當代價…</p><h2 id="增加數據"><a href="#增加數據" class="headerlink" title="增加數據"></a>增加數據</h2><p>例如要新增 Green 到 <code>a[1]</code>，則必須先確保陣列還要足夠空間新增，並且依序將 Red、Yellow 往後移動 <img src="/blog/2018/01/25/ds-array/add.gif" class="inline"></p><p>p.s 記得，所有數據在記憶體區塊中必連續儲存</p><h2 id="刪除數據"><a href="#刪除數據" class="headerlink" title="刪除數據"></a>刪除數據</h2><p>反之，要將 Green 從 <code>a[1]</code> 移除，則刪除 Green 後，依序將 Yellow、Red 往前移動最後刪除多餘的儲存空間 <img src="/blog/2018/01/25/ds-array/remove.gif" class="inline"></p><h2 id="執行時間討論-以-大O符號-表示"><a href="#執行時間討論-以-大O符號-表示" class="headerlink" title="執行時間討論 (以 大O符號 表示)"></a>執行時間討論 (以 <a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7">大O符號</a> 表示)</h2><ol><li>使用陣列內的數據的執行時間<br> 因為能隨機存取，不受陣列中的 n 個數據影響，所以為常數時間 <code>O(1)</code></li><li>新增數據<br> 需將指定位置的數據往後移動，當陣列最前端追加數據時，故為 <code>O(n)</code></li><li>刪除數據<br> 當刪除數據在陣列最前端時，同樣需耗費時間 <code>O(n)</code></li></ol><h2 id="列表-vs-陣列"><a href="#列表-vs-陣列" class="headerlink" title="列表 vs 陣列"></a>列表 vs 陣列</h2><p>可以簡單整理出以下表格，列表適合新增/刪除數據；陣列則適合存取數據。因此需視情況選定使用列表或是陣列</p><table><thead><tr><th></th><th>存取數據</th><th>新增數據</th><th>刪除數據</th></tr></thead><tbody><tr><td>列表</td><td>慢</td><td><strong>快</strong></td><td><strong>快</strong></td></tr><tr><td>陣列</td><td><strong>快</strong></td><td>慢</td><td>慢</td></tr></tbody></table><h2 id="Java-的實作"><a href="#Java-的實作" class="headerlink" title="Java 的實作"></a>Java 的實作</h2><p>在 Java 有個類別叫做 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html">ArrayList</a>，實際上這個類別是透過陣列的方式實作 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">List</a><br>參考 OpenJDK 的 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/ArrayList.java#L111">ArrayList</a> source code 即可發現透過陣列儲存 </p><h3 id="存取數據-get-方法"><a href="#存取數據-get-方法" class="headerlink" title="存取數據 get 方法"></a>存取數據 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/ArrayList.java#L370-L385">get</a> 方法</h3><p><code>elementData</code> 方法實際上即是透過索引直接存取陣列中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增數據-add-方法"><a href="#新增數據-add-方法" class="headerlink" title="新增數據 add 方法"></a>新增數據 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/ArrayList.java#L410-L414">add</a> 方法</h3><p><code>ensureCapacityInternal</code> 即是用來確保內部陣列仍有足夠空間新增數據，當陣列長度不足時，會透過 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-T:A-int-">Arrays.copyOf</a> 方法產生新的陣列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刪除數據-remove-方法"><a href="#刪除數據-remove-方法" class="headerlink" title="刪除數據 remove 方法"></a>刪除數據 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/ArrayList.java#L444-L457">remove</a> 方法</h3><p>透過 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-">System.arraycopy</a> 將刪去元素後面的元素逐一往前移動</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 內部採用陣列方式實作，因此是不利於新增或刪除數據的<br>(若有新增/刪除數據的需求應該使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html">LinkedList</a>，兩者實作方式完全不同，可參考 <a href="https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/LinkedList.java">LinkedList</a> source code)</p>]]></content>
      
      
      <categories>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/blog/2018/01/21/ds-list/"/>
      <url>/blog/2018/01/21/ds-list/</url>
      
        <content type="html"><![CDATA[<h2 id="指標"><a href="#指標" class="headerlink" title="指標"></a>指標</h2><p>列表是資料結構的一種，這類結構的數據排成一直線，便於追加或刪除，但存取數據卻很費時。</p><p>每個「數據」和一個「指標」配對，指向下一個數據在記憶體中的位址 其中，Red 是最後的數據，所以其指標沒有指向任何位址</p><img src="/blog/2018/01/21/ds-list/list.png" class="inline"><span id="more"></span><p>列表中，數據不需要連續儲存於記憶體中，一般分散於各個記憶體區塊 <img src="/blog/2018/01/21/ds-list/memory.gif" class="inline"></p><h2 id="順序存取-sequential-access"><a href="#順序存取-sequential-access" class="headerlink" title="順序存取 (sequential access)"></a>順序存取 (sequential access)</h2><p>由於數據被分散儲存，所以只能從頭依序跟著指標存取各數據<br>如上圖動畫：要存取 Red，必須透過 Blue 取得 Yellow 後，才能取得 Red</p><h2 id="增加數據"><a href="#增加數據" class="headerlink" title="增加數據"></a>增加數據</h2><p>只要把追加位址前後的指標轉向即可，例如想在 Blue 與 Yellow 之間增加 Green 僅需將 Blue 指標指向 Green，再把 Green 的指標指向 Yellow 即可 <img src="/blog/2018/01/21/ds-list/add.gif" class="inline"></p><p>p.s 記得，所有數據在記憶體區塊中都可不必連續儲存</p><h2 id="刪除數據"><a href="#刪除數據" class="headerlink" title="刪除數據"></a>刪除數據</h2><p>同樣將指標轉向即可，例如想刪除 Yellow，僅需將 Green 的指標指向 Red Yellow 區塊雖仍存在記憶體中，但是已無法被存取。 <img src="/blog/2018/01/21/ds-list/remove.gif" class="inline"></p><p>p.s 若要重複使用這個記憶體區塊，僅需覆寫即可。</p><h2 id="執行時間討論-以-大O符號-表示"><a href="#執行時間討論-以-大O符號-表示" class="headerlink" title="執行時間討論 (以 大O符號 表示)"></a>執行時間討論 (以 <a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7">大O符號</a> 表示)</h2><ol><li>使用列表內的數據的執行時間<br> 假設列表中的數據有 n 個，存取最後一個數據必須從頭開始，因此為 <code>O(n)</code></li><li>新增數據<br> 僅需改變 2 個指標指向，與列表中 n 個數據無關，因此為常數時間 <code>O(1)</code><br> 前提是已知數據新增位置，否則需考慮從數據查找的執行時間</li><li>刪除數據<br> 同樣僅需耗費常數時間 <code>O(1)</code></li></ol><h2 id="其他列表"><a href="#其他列表" class="headerlink" title="其他列表"></a>其他列表</h2><ul><li>環狀列表 / 循環列表 (Circular List)<br>將最後一個數據的指標指向第一個數據，就能形成環狀。此列表沒有頭尾區分，可用來限制列表內的數據數量。 <img src="/blog/2018/01/21/ds-list/circular-list.png" class="inline"></li><li>雙向列表 (Bidirectional List)<br>當每個數據帶 2 個指標，分別指向前後數據。此列表一樣沒有頭尾區分，且可從另一端來存取。 此列表的缺點為必須增加記憶體使用量，且新增或刪除數據時，要變更方向的指標數也變多了。 <img src="/blog/2018/01/21/ds-list/bidirectional-list.png" class="inline"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何謂資料結構</title>
      <link href="/blog/2018/01/20/what-is-data-structure/"/>
      <url>/blog/2018/01/20/what-is-data-structure/</url>
      
        <content type="html"><![CDATA[<h2 id="決定數據-Data-的順序和位置"><a href="#決定數據-Data-的順序和位置" class="headerlink" title="決定數據(Data)的順序和位置"></a>決定數據(Data)的順序和位置</h2><p>數據儲存在電腦的記憶體中，而記憶體如下圖所示，呈現箱子排成一列的形狀，每個箱子都存有一個數據。 <img src="/blog/2018/01/20/what-is-data-structure/memory.png" class="inline"></p><p>當數據儲存在記憶體中時，決定數據的順序和位置的，就是「資料結構」(Data Structure)。</p><span id="more"></span><h2 id="以電話簿的資料結構為例"><a href="#以電話簿的資料結構為例" class="headerlink" title="以電話簿的資料結構為例"></a>以電話簿的資料結構為例</h2><h3 id="依序上往下追加"><a href="#依序上往下追加" class="headerlink" title="依序上往下追加"></a>依序上往下追加</h3><p>在手機不盛行的年代，記下朋友電話就只能用紙筆記錄，通常都會每得到一組電話號碼，都由上往下依序寫在紙上。</p><table><thead><tr><th>姓名</th><th>電話號碼</th></tr></thead><tbody><tr><td>楊美珍</td><td>0987-654-321</td></tr><tr><td>駱欣怡</td><td>0912-345-678</td></tr><tr><td>許如木</td><td>0956-781-234</td></tr><tr><td>林秀昌</td><td>0943-218-765</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>當要找「王珮雯」的電話時，因為資訊只是單純的以先後順序排列，所以不知道「王珮雯」的電話寫在哪裡，只能從_頭_開始尋找<br>(或是從_最後_開始，或是_隨機_尋找，但是非常耗時)</p><p>如果只有幾組電話或許可以馬上找到，但是當有數百、數千時可就非常麻煩了…ヾ(<em>´∀｀</em>)ﾉ</p><h3 id="依姓名的聲母順序管理"><a href="#依姓名的聲母順序管理" class="headerlink" title="依姓名的聲母順序管理"></a>依姓名的聲母順序管理</h3><p>若換用注音(ㄅ、ㄆ、ㄇ)來管理電話號碼，因為姓名依照聲母順序排列，所以這類數據具有「結構」</p><table><thead><tr><th>姓名</th><th>電話號碼</th></tr></thead><tbody><tr><td>林(ㄌㄧㄣˊ)秀昌</td><td>0943-218-765</td></tr><tr><td>駱(ㄌㄨㄛˋ)欣怡</td><td>0912-345-678</td></tr><tr><td>許(ㄒㄩˇ)如木</td><td>0956-781-234</td></tr><tr><td>楊(ㄧㄤˊ)美珍</td><td>0987-654-321</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>注意到，因「林秀昌」與「駱欣怡」聲母一樣(皆為ㄌ)，因此再以第二個注音做排序</p><p>如此一來，從姓氏第一個字就大概能推測出位在電話簿何處位置，能較輕鬆找到對方電話號碼了</p><p><em>我想新增號碼怎麼辦?</em><br>今天認識了一位李(ㄌㄧˇ)安琪，要把電話號碼加進電話簿時，必須加在電話簿的第一順位<br>因此必須把所有電話號碼皆往下移動一行，才能將李安琪的電話插入電話簿第一行</p><p>依序進行「電話號碼皆往下移動一行」，假設每10秒可移動1筆資料，1分鐘才可移動6筆資料，一小時也才不過360筆資料….</p><h3 id="各自優缺點"><a href="#各自優缺點" class="headerlink" title="各自優缺點"></a>各自優缺點</h3><p>依序上往下追加：追加數據時相當容易，但查找費力。反之，根據姓名的聲母順序便於查找，但是不利於追加數據<br>一本電話簿，多種紀錄方式，各自精采，要用哪一種，取決於怎麼使用電話簿。<br>頻繁增加資訊卻不太需要查找(使用前者) vs 建立完成後幾乎不再更新 (使用後者)</p><h3 id="試著結合兩者"><a href="#試著結合兩者" class="headerlink" title="試著結合兩者"></a>試著結合兩者</h3><p>例如將注音(ㄅ、ㄆ、ㄇ…)每一個聲母分成獨立的表格，在同一個表格中則採用依序上往下追加聯絡資訊。</p><h4 id="ㄌ-表"><a href="#ㄌ-表" class="headerlink" title="ㄌ 表"></a>ㄌ 表</h4><table><thead><tr><th>姓名</th><th>電話號碼</th></tr></thead><tbody><tr><td>駱欣怡</td><td>0912-345-678</td></tr><tr><td>林秀昌</td><td>0943-218-765</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h4 id="ㄒ-表"><a href="#ㄒ-表" class="headerlink" title="ㄒ 表"></a>ㄒ 表</h4><table><thead><tr><th>姓名</th><th>電話號碼</th></tr></thead><tbody><tr><td>許如木</td><td>0956-781-234</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h4 id="ㄧ-表"><a href="#ㄧ-表" class="headerlink" title="ㄧ 表"></a>ㄧ 表</h4><table><thead><tr><th>姓名</th><th>電話號碼</th></tr></thead><tbody><tr><td>楊美珍</td><td>0987-654-321</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>像這樣，新增聯絡資訊時，只要加在該聲母開頭的表格最末行就好，查找電話時，也只需查找該聲母表格<br>(不過，因為各表格並無特別順序，因此該表仍需整份檢索，但比起整本電話簿查找已省去不少時間)</p><h2 id="在資料結構下工夫，就能提高記憶體使用效率"><a href="#在資料結構下工夫，就能提高記憶體使用效率" class="headerlink" title="在資料結構下工夫，就能提高記憶體使用效率"></a>在資料結構下工夫，就能提高記憶體使用效率</h2><p>資料結構的邏輯與上述電話簿相同。當數據儲存在記憶體中，根據目的妥善結構化數據，就能提高使用效率。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://www.books.com.tw/products/0010771263">演算法圖鑑</a></li><li>Algorithms: Explained and Animated<ul><li><a href="https://itunes.apple.com/us/app/algorithms-explained-and-animated/id1047532631">App Store</a></li><li><a href="https://play.google.com/store/apps/details?id=wiki.algorithm.algorithms">Google Play</a></li></ul></li></ul><p>此一系列筆記為閱讀演算法圖鑑後心得，畢竟不是本科系出身，希望能透過撰寫電子檔過程中，對於資料結構、演算法等有進一步認識╰(<em>´︶`</em>)╯♡</p>]]></content>
      
      
      <categories>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CXF Unmarshalling Error: unexpected element</title>
      <link href="/blog/2017/11/12/unmarshalling-error-unexpected-element/"/>
      <url>/blog/2017/11/12/unmarshalling-error-unexpected-element/</url>
      
        <content type="html"><![CDATA[<p>最近在使用 <a href="http://cxf.apache.org/docs/index.html">Apache CXF</a> 搭配 SpringBoot 進行 WebService 開發</p><p>測試 Server 端時先使用 <a href="https://www.soapui.org/">SoapUI</a> 確認沒問題後，再改用 CXF Client 端呼叫，</p><p>本機開發使用 Tomcat 跑 Server 端沒有問題，SoapUI 可正常執行並取得結果，CXF Client 端亦是如此</p><p>不過實際佈署到 Weblogic 上，SoapUI 可正常執行並取得結果，CXF Client 端卻拋例外了….◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</p><p>例外訊息為 <code>javax.xml.ws.soap.SOAPFaultException: Unmarshalling Error: unexpected element (uri:&quot;http://io.github.coffee0127/&quot;, local:&quot;return&quot;). Expected elements are &lt;&#123;&#125;return&gt;</code></p><p>後來發現可透過 <code>StaxTransformFeature</code> 將未預期的 namespace 去除掉<br><em>(不過至於為何 Weblogic 會加上這些 namespace 還要研究…Orz)</em></p><p>專案架構如下，程式碼可到 <a href="https://github.com/Coffee0127/cxf-test-proj">cxf-test-proj</a> 下載</p><ul><li>ws-api 放置 WebService 介面與訊息物件</li><li>ws-client 放置 WebService Client 端 CXF 設定</li><li>ws-server 放置 WebService Server 端 CXF 設定及 WebService 實作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cxf-test-proj</span><br><span class="line">├─ws-api</span><br><span class="line">│  └─src</span><br><span class="line">│     └─main</span><br><span class="line">│         └─java</span><br><span class="line">│             └─io</span><br><span class="line">│                 └─github</span><br><span class="line">│                     └─coffee0127</span><br><span class="line">│                        └─service</span><br><span class="line">├─ws-client</span><br><span class="line">│   └─src</span><br><span class="line">│      └─main</span><br><span class="line">│         └─resources</span><br><span class="line">│              └─META-INF</span><br><span class="line">│                  └─spring</span><br><span class="line">└─ws-server</span><br><span class="line">    └─src</span><br><span class="line">       └─main</span><br><span class="line">          ├─java</span><br><span class="line">          │   └─io</span><br><span class="line">          │      └─github</span><br><span class="line">          │          └─coffee0127</span><br><span class="line">          │             └─service</span><br><span class="line">          │                 └─impl</span><br><span class="line">          └─resources</span><br><span class="line">              └─META-INF</span><br><span class="line">                  └─spring</span><br></pre></td></tr></table></figure><h3 id="ws-server"><a href="#ws-server" class="headerlink" title="ws-server"></a>ws-server</h3><ul><li><p>service-wss.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:jaxws</span>=<span class="string">&quot;http://cxf.apache.org/jaxws&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://cxf.apache.org/jaxws</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://cxf.apache.org/schemas/jaxws.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxws:endpoint</span> <span class="attr">implementor</span>=<span class="string">&quot;io.github.coffee0127.service.impl.FunctionProcessServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">address</span>=<span class="string">&quot;/s001&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>FunctionProcessServiceImpl.java (簡單的實作，並無其他特別設定)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;FunctionProcessService&quot;)</span></span><br><span class="line"><span class="meta">@WebService(name = &quot;FunctionProcessService&quot;, serviceName = &quot;FunctionProcessServiceClient&quot;,</span></span><br><span class="line"><span class="meta">    portName = &quot;FunctionProcessServicePort&quot;, targetNamespace = &quot;http://service.coffee0127.github.io/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionProcessServiceImpl</span> <span class="keyword">implements</span> <span class="title">FunctionProcessService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE_TIME_FORMAT = LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceMsg <span class="title">msgProcess</span><span class="params">(ServiceMsg serviceMsg)</span> </span>&#123;</span><br><span class="line">        serviceMsg.getHeader().setMessageTimestamp(DATE_TIME_FORMAT);</span><br><span class="line">        serviceMsg.setBody(<span class="string">&quot;Return-&quot;</span> + serviceMsg.getBody());</span><br><span class="line">        <span class="keyword">return</span> serviceMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ws-client"><a href="#ws-client" class="headerlink" title="ws-client"></a>ws-client</h3><ul><li>service-wsc.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:jaxws</span>=<span class="string">&quot;http://cxf.apache.org/jaxws&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://cxf.apache.org/jaxws</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://cxf.apache.org/schemas/jaxws.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 透過 jaxws:client 取得 WebService Client 端: 指定 &quot;介面&quot; 與 &quot;發佈網址&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxws:client</span> <span class="attr">id</span>=<span class="string">&quot;FunctionProcessService&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">serviceClass</span>=<span class="string">&quot;io.github.coffee0127.service.FunctionProcessService&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">address</span>=<span class="string">&quot;http://127.0.0.1:8080/my-service/wsdl/s001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxws:features</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.cxf.feature.StaxTransformFeature&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;inTransformElements&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;return&quot;</span> <span class="attr">value</span>=<span class="string">&quot;return&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;header&quot;</span> <span class="attr">value</span>=<span class="string">&quot;header&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;body&quot;</span> <span class="attr">value</span>=<span class="string">&quot;body&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;accessIp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;accessIp&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;caseId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;caseId&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;serviceId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;serviceId&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;&#123;http://io.github.coffee0127/&#125;messageTimestamp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;messageTimestamp&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxws:features</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jaxws:client</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://cxf.apache.org/docs/springboot.html">Apache CXF SpringBoot</a><ul><li><a href="http://cxf.apache.org/docs/transformationfeature.html">Transformation Feature</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Apache CXF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Apache CXF </tag>
            
            <tag> Weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 VS Code 替 Angular 除錯</title>
      <link href="/blog/2017/06/11/Angular-debug-with-VS-Code/"/>
      <url>/blog/2017/06/11/Angular-debug-with-VS-Code/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="/blog/2017/06/11/Angular-debug-with-chrome/" title="使用 Chrome 替 Angular 除錯">使用 Chrome 替 Angular 除錯</a> 寫了如何使用 Chrome 來進行除錯， 不過在雙螢幕情況下，這時反而會顯得工作效率低落</p><p><em>修改程式 -&gt; 切換瀏覽器開發者工具 -&gt; 設置中斷點除錯 -&gt; 切回 VS Code -&gt; 修改程式 -&gt; …</em></p><p>應該善用 VS Code 本身的除錯工具，就不需要視窗切來切去了</p><span id="more"></span><h4 id="執行步驟："><a href="#執行步驟：" class="headerlink" title="執行步驟："></a>執行步驟：</h4><ol><li>先安裝 <a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for Chrome</a></li><li>建立 <code>launch.json</code><ul><li>如果之前已建立過，此步驟可省略</li><li>如果沒有 <code>launch.json</code>，可輸入指令 <code>ctrl + p</code> → <code>&gt;debuglaunch.json</code> 並選擇 <code>Chrome</code> (VS Code 會自動建立 <code>.vscode</code> 資料夾與 <code>launch.json</code>)<img src="/blog/2017/06/11/Angular-debug-with-VS-Code/add-launch-json.gif" class="inline"></li></ul></li><li>於 <code>launch.json</code> 加入以下設定<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch Chrome against localhost&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:4200&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;userDataDir&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/.chrome&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sourceMapPathOverrides&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;webpack:///./src/*&quot;</span>: <span class="string">&quot;$&#123;webRoot&#125;/*&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>url</code>：修改成 Angular 專案的網址 (即預設的 <a href="http://localhost:4200/">http://localhost:4200</a>)</li><li><code>webRoot</code>：指定路徑至 <code>src</code> 目錄資料夾 (存放 source code 的路徑)</li><li><code>sourceMapPathOverrides</code>：加入 <code>&quot;webpack:///./src/*&quot;: &quot;$&#123;webRoot&#125;/*&quot;</code><ul><li><a href="/blog/2017/06/11/Angular-debug-with-chrome/" title="使用 Chrome 替 Angular 除錯">使用 Chrome 替 Angular 除錯</a> 時，於 Chrome 設定 Webpack 中斷點的路徑 `./`</li></ul></li></ul></li><li>透過 <code>npm start</code> 啟動 Angular 專案</li><li>按下 <code>F5</code> 開始執行除錯 (VS Code 會自動開啟新的 Chrome 瀏覽器)</li><li>開始進行除錯<br><em>修改程式 -&gt; 設置中斷點除錯 -&gt; 修改程式 -&gt; …</em><img src="/blog/2017/06/11/Angular-debug-with-VS-Code/vs-code-debug.gif" class="inline"><br>p.s 不需要切換視窗，VS Code 改完 Angular cli 會自動刷新頁面</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/Microsoft/vscode-chrome-debug">VS Code - Debugger for Chrome</a></li><li><a href="https://medium.com/@auchenberg/live-edit-and-debug-your-react-apps-directly-from-vs-code-without-leaving-the-editor-3da489ed905f">Live edit and debug your React apps directly from VS Code — without leaving the editor </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Chrome 替 Angular 除錯</title>
      <link href="/blog/2017/06/11/Angular-debug-with-chrome/"/>
      <url>/blog/2017/06/11/Angular-debug-with-chrome/</url>
      
        <content type="html"><![CDATA[<p>使用 Angular cli 工具好處就是可以節省許多環境面的設定 (如 TypeScript 轉譯、Webpack 打包、程式最小化等)<br>讓我們能夠專注於業務邏輯的撰寫  </p><p>不過也因為所有程式會被 Webpack 打包成 main.bundle.js，在除錯時較不容易找到自己撰寫的程式碼 <del>(via Ctrl + F 搜尋)</del><br>還好 Webpack 在打包時會產生 source map，以方便程式設計師可以對應原本程式碼  </p><span id="more"></span><p>打開 Chrome 開發者工具，切換至 <code>Sources</code> 頁籤 <img src="/blog/2017/06/11/Angular-debug-with-chrome/chrome-dev-tool-sources.png" class="inline"></p><p>從左方資源列表可以看到 <code>webpack://</code>，點開並尋找 <code>.</code> 資料夾下，即可看到 Angular 專案的 <code>src</code> 目錄 <img src="/blog/2017/06/11/Angular-debug-with-chrome/webpack-root.png" class="inline"></p><p>尋找要進行除錯的程式，設定中斷點，即可使用 Chrome 來進行除錯<br>(除錯常見的 Watch、Call Stack 等功能都可在 Chrome 開發者工具中使用)</p><img src="/blog/2017/06/11/Angular-debug-with-chrome/chrome-debug.png" class="inline">]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包 SpringBoot 為 war 檔</title>
      <link href="/blog/2017/04/26/convert-spring-boot-jar-to-war/"/>
      <url>/blog/2017/04/26/convert-spring-boot-jar-to-war/</url>
      
        <content type="html"><![CDATA[<span style="font-size: 1.3em;font-weight:bold;">程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/commit/ae4bcecdbec04b3f5373d58364b1bdb1336d7a32">Angular-SpringMVC-Integration</a></span><p>在 <a href="/blog/2017/04/23/spring-boot-rest/" title="使用 SpringBoot 建立 RESTful 程式">使用 SpringBoot 建立 RESTful 程式</a> 時，有建立了一個簡單的 SpringMVC 程式，但是打包出來的結果是 jar 檔，接下來就是將其打包成為 war 檔，使得能夠佈署在我們現有的 Servlet Container 上</p><h3 id="加入-Spring-Boot-Maven-plugin"><a href="#加入-Spring-Boot-Maven-plugin" class="headerlink" title="加入 Spring Boot Maven plugin"></a>加入 <a href="http://docs.spring.io/spring-boot/docs/1.5.x/maven-plugin/">Spring Boot Maven plugin</a></h3><p><a href="http://docs.spring.io/spring-boot/docs/1.5.x/maven-plugin/">Spring Boot Maven plugin</a> 讓 Maven 能夠支援 SpringBoot，使 SpringBoot 專案能打包為可執行的 jar 檔或 war 檔<span id="more"></span><br>僅需於 pom.xml 中加入以下設定即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不過若是 maven 專案繼承自 <code>spring-boot-starter-parent</code> 那麼可以簡化成如下設定即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嗯，沒錯，就這麼簡單，連版本都不用寫XD<br>事實上打開 <code>spring-boot-starter-parent</code> 後會發現他又繼承了 <code>spring-boot-dependencies</code>，<br>而 <code>spring-boot-dependencies</code> 內透過 <code>&lt;dependencyManagement&gt;</code> 及 <code>pluginManagement</code> 都幫我們定義了一些預設的 scope 或是 goal 等</p><p>這個時候已經可以包出可執行的 jar 檔了!</p><h3 id="修改-Maven-的-packaging-及更改-spring-boot-starter-tomcat-scope"><a href="#修改-Maven-的-packaging-及更改-spring-boot-starter-tomcat-scope" class="headerlink" title="修改 Maven 的 packaging 及更改 spring-boot-starter-tomcat scope"></a>修改 Maven 的 packaging 及更改 <code>spring-boot-starter-tomcat</code> scope</h3><ol><li>將 packaging 改為 <code>war</code> (預設值為 <code>jar</code>)</li><li>將 <code>spring-boot-starter-tomcat</code> scope 更改為 “provided”<br>為什麼前一步驟包出來的 jar 檔可以直接透過 <code>java -jar</code> 方式跑 web 程式，其實就是因為內建了 Tomcat 所需的一些函式庫<br>不過當我們打包成 war 檔時，這些函式庫反而會跟 server 起衝突，因此需將其更改為 “provided”<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="修改原本的-SpringBootApplication"><a href="#修改原本的-SpringBootApplication" class="headerlink" title="修改原本的 SpringBootApplication"></a>修改原本的 SpringBootApplication</h3><ol><li>將原本標註 <a href="http://docs.spring.io/autorepo/docs/spring-boot/1.5.x/api/org/springframework/boot/autoconfigure/SpringBootApplication.html"><code>@SpringBootApplication</code></a> 的主程式繼承 <a href="http://docs.spring.io/autorepo/docs/spring-boot/1.5.x/api/org/springframework/boot/web/support/SpringBootServletInitializer.html"><code>SpringBootServletInitializer</code></a><br>而 <a href="http://docs.spring.io/autorepo/docs/spring-boot/1.5.x/api/org/springframework/boot/web/support/SpringBootServletInitializer.html"><code>SpringBootServletInitializer</code></a> 又繼承了 <a href="http://docs.spring.io/spring-framework/docs/4.3.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html"><code>WebApplicationInitializer</code></a><br><a href="http://docs.spring.io/spring-framework/docs/4.3.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html"><code>WebApplicationInitializer</code></a> 是 Spring 3.1 新增介面，實作此介面的類別，不需額外宣告，會自動被 <a href="http://docs.spring.io/spring-framework/docs/4.3.8.RELEASE/javadoc-api/org/springframework/web/SpringServletContainerInitializer.html"><code>SpringServletContainerInitializer</code></a> 偵測、自動呼叫註冊所需的相關方法</li></ol><p>  <em>(但是很重要的一點，Servlet 3.0 以上才支援XD；Servlet 2.5 之前的版本還是只能透過 web.xml 方式註冊 <code>ApplicationContext</code> 及 <code>DispatcherServlet</code>)</em><br>2. 覆寫 <code>configure</code> 方法，加入 java configuration (也就是 <code>MainApplication</code> 啦!)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(MainApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包出來的結果，是個 “可執行的 war 檔”，可以將其單獨佈署在 Servlet Container 上 (如 Tomcat)</p><p>也可以透過 <code>java -jar SampleProject.war</code> 的方式執行這個 war 檔<br>    打開 <code>META-INF/MANIFEST.MF</code> 的檔案，會看到 <code>Main-Class: org.springframework.boot.loader.WarLauncher</code><br>    因此實際執行 SpringBoot 的主程式 (並且使用 WEB-INF/lib-provided 的 Tomcat 函式庫)</p><p>在 <code>target</code> 目錄下會看到 <code>SampleProject.war.original</code>，這是原本 Maven 打包出來的 war 檔，但是被 <a href="http://docs.spring.io/spring-boot/docs/1.5.x/maven-plugin/">Spring Boot Maven plugin</a> 重新打包過了 (<code>repackage</code>)</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging">Packaging executable jar and war files</a></li><li><a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file">Create a deployable war file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透過 Maven 整合 Angular 專案</title>
      <link href="/blog/2017/04/25/Maven-Angular-integration/"/>
      <url>/blog/2017/04/25/Maven-Angular-integration/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="/blog/2017/04/23/spring-boot-rest/" title="使用 SpringBoot 建立 RESTful 程式">使用 SpringBoot 建立 RESTful 程式</a> 及 <a href="/blog/2017/04/23/Angular-proxy-to-backend-rest/" title="Angular 呼叫遠端 API">Angular 呼叫遠端 API</a> 已經分別完成<strong>開發時期</strong>前後端串接， 接下來是透過 Maven Plugin 將前後端程式打包再一起。</p><p>不過為了增加程式的真實性，先加入兩個頁面以驅動 Angular 路由機制 (可參考 <a href="/2017/04/24/Angular-simple-routing/">透過 Angular 路由建立 SPA 網站</a>)</p><span id="more"></span><h3 id="設定-frontend-maven-plugin"><a href="#設定-frontend-maven-plugin" class="headerlink" title="設定 frontend-maven-plugin"></a>設定 <a href="https://github.com/eirslett/frontend-maven-plugin">frontend-maven-plugin</a></h3><p>在 <code>&lt;plugins&gt;</code> 內加入 <a href="https://github.com/eirslett/frontend-maven-plugin">frontend-maven-plugin</a><br>作者建議是使用最新版的 (可至 <a href="https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/">https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/</a> 查閱最新版本)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">installDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">installDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>front<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 後續介紹... --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;workingDirectory&gt;</code> 指向 <code>package.json</code> 所在目錄，小弟這邊指向 <a href="/blog/2017/04/23/Angular-proxy-to-backend-rest/" title="Angular 呼叫遠端 API">Angular 呼叫遠端 API</a> 時建立的 <code>front</code> 資料夾</li><li>透過 <code>&lt;installDirectory</code>&gt; 指定檔案下載路徑，預設會在 <code>$&#123;project.basedir&#125;</code> 建立 <code>node</code> 資料夾<ul><li>由於設定了 <code>&lt;workingDirectory&gt;</code>，Maven 預設會從 <code>&lt;workingDirectory&gt;</code> 下尋找 node &amp; yarn，因此我們必須指定路徑回專案根目錄( <code>$&#123;project.basedir&#125;</code>)</li></ul></li></ul><p>接著開始加入 <code>&lt;execution&gt;</code></p><h4 id="安裝-node、npm、yarn"><a href="#安裝-node、npm、yarn" class="headerlink" title="安裝 node、npm、yarn"></a>安裝 node、npm、yarn</h4><p>第一步當然是要安裝 NodeJS 及 NPM，不過小弟覺得 yarn 安裝速度快一點，因此是直接把兩個 <code>&lt;goal&gt;</code> 寫在一起了XD</p><ul><li>透過 <code>&lt;nodeVersion&gt;</code>、<code>&lt;npmVersion&gt;</code>、<code>&lt;yarnVersion&gt;</code> 分別指定版本<ul><li>因為 Angular CLI 需要使用到 npm-cli，因此還是必須安裝 npm</li></ul></li><li>透過 <code>&lt;nodeDownloadRoot&gt;</code>、<code>&lt;npmDownloadRoot&gt;</code>、<code>&lt;yarnDownloadRoot&gt;</code> 可以指定下載來源網址 (可用於公司內網環境)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and yarn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-yarn<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v6.10.0<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>3.10.10<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">yarnVersion</span>&gt;</span>v0.22.0<span class="tag">&lt;/<span class="name">yarnVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安裝-node-modules"><a href="#安裝-node-modules" class="headerlink" title="安裝 node_modules"></a>安裝 node_modules</h4>因為在前一步驟有安裝了 yarn，因此這邊的 goal 選擇使用 <a href="https://github.com/eirslett/frontend-maven-plugin#running-yarn">Running yarn</a></li><li>(當然你也可以選擇執行 <a href="https://github.com/eirslett/frontend-maven-plugin#running-npm">Running npm</a> 或 <a href="https://github.com/eirslett/frontend-maven-plugin#running-grunt">Running Grunt</a>)*<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>yarn install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="執行-Angular-CLI-打包"><a href="#執行-Angular-CLI-打包" class="headerlink" title="執行 Angular CLI 打包"></a>執行 Angular CLI 打包</h4>這邊執行 <a href="https://github.com/eirslett/frontend-maven-plugin#running-npm">Running npm</a></li><li>透過 <code>ng build</code> script 打包 Angular 專案</li><li><code>--pord</code> 指定打包方式為 production，這邊需特別注意 <code>--prod</code> 前面的 <strong><code>--</code></strong><br>因為這個 <code>&lt;goal&gt;</code> 最終會變成 <a href="https://docs.npmjs.com/cli/run-script">npm-run-script</a>，根據其定義在 <code>&lt;args&gt;</code> 之前必須帶額外的兩個 <code>--</code><br>小弟畢竟對 NodeJS 不是那麼的熟，當初找 global command 的 <code>ng build --base-href</code> 可以正常運作，但是跑 <code>npm run ng build --base-href</code> 卻失敗 XD，直到看到這篇 <a href="https://github.com/angular/angular-cli/issues/5768">npm run ng build –base-href /newapp not working</a> 才恍然大悟ˋ(′ε‵”)ˊ</li><li>透過 <code>--base-href /$&#123;app.context.name&#125;/</code> 設定 Angular 路由的 base href Angular CLI 會很聰明地幫我們把 index.html 原本的 <code>&lt;base href=&quot;/&quot;&gt;</code> 替換成 <code>&lt;base href=&quot;/$&#123;app.context.name&#125;/&quot;&gt;</code><br>這邊的 <code>$&#123;app.context.name&#125;</code> 則是在 <a href="/blog/2017/04/23/spring-boot-rest/" title="使用 SpringBoot 建立 RESTful 程式">使用 SpringBoot 建立 RESTful 程式</a> 時候設定的 Maven properties<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>ng build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>run ng build -- --prod --base-href /$&#123;app.context.name&#125;/<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>※ 補充說明：此 plugin 不會使用系統已安裝好的 NodeJS，當然可以透過 <code>&lt;installDirectory&gt;</code> 指定含有 node 的系統資料夾</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">installDirectory</span>&gt;</span>C:/iCoding<span class="tag">&lt;/<span class="name">installDirectory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>執行時會去 C:/iCoding/node 尋找 node 執行檔 (這個路徑可以是透過 symbolic link 建立出來的 XD)</p><h3 id="設定-maven-resources-plugin"><a href="#設定-maven-resources-plugin" class="headerlink" title="設定 maven-resources-plugin"></a>設定 <a href="https://maven.apache.org/plugins/maven-resources-plugin/">maven-resources-plugin</a></h3><p>若 <a href="https://github.com/eirslett/frontend-maven-plugin">frontend-maven-plugin</a> 設定正確且運作正常的話，會在 <code>front</code> 下產出 <code>dist</code> 資料夾，並含有打包好的 Angular 專案<br>接著我們只需要透過 <a href="https://maven.apache.org/plugins/maven-resources-plugin/">maven-resources-plugin</a> 把它複製到 SpringBoot 的 static 資料夾即可<br><em>(如果是 war 檔可以透過 <a href="https://maven.apache.org/plugins/maven-war-plugin/examples/including-excluding-files-from-war.html">maven-war-plugin</a> 實現)</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-angular<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes/static<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>front/dist<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改-Angular-http-程式的-base-url"><a href="#修改-Angular-http-程式的-base-url" class="headerlink" title="修改 Angular http 程式的 base url"></a>修改 Angular http 程式的 <code>base url</code></h3><div style="color: red; font-size: 1.5em; font-weight: 100">此作法用於 Angular 2.x，Angular 5.x 之後做法還請參考 <a href="/blog/2018/07/01/Angular-migrate-from-2-x/#修改-Angular-httpClient-程式的-base-url">Angular 2.0 升級至 6.0</a></div>老實說小弟很不確定這種寫法到底對不對...XD 如果有誤還請各位先進指點<ol><li>建立 CustomRequestOptions 元件 <code>ng g class CustomRequestOptions</code></li><li>繼承 <a href="https://angular.io/docs/ts/latest/api/http/index/BaseRequestOptions-class.html">BaseRequestOptions</a> 並實作 <a href="https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html#!#merge-anchor">merge</a> 方法<br>若是 production 環境下，則將 <a href="https://angular.io/docs/ts/latest/api/http/index/Http-class.html">Http</a> 所有 ‘/‘ 開頭的 URL 加上 context path<img src="/blog/2017/04/25/Maven-Angular-integration/step2.png" class="inline"></li><li>修改 <code>app.module.ts</code> 透過 DI 方式注入 CustomRequestOptions 元件<img src="/blog/2017/04/25/Maven-Angular-integration/step3.png" class="inline"></li></ol><h3 id="透過-Maven-打包-amp-執行"><a href="#透過-Maven-打包-amp-執行" class="headerlink" title="透過 Maven 打包 &amp; 執行"></a>透過 Maven 打包 &amp; 執行</h3><ol><li><code>mvn clean package</code> 後在 target 資料夾下會有 SpringBoot 的 jar 檔產生</li><li>執行 <code>java -jar target\Angular-SpringMVC-Integration-0.0.1-SNAPSHOT.jar</code> 並連線至 <code>http://localhost:8080/SampleProject</code> 即可看到 Angular 路由及 Http 存取皆可正常運作<br>\(￣▽￣)/(\￣▽)/\(　 　)/\(▽￣/)\(￣▽￣)/ </li></ol><span style="font-size: 1.3em;font-weight:bold;">程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration">Angular-SpringMVC-Integration</a></span><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/eirslett/frontend-maven-plugin">frontend-maven-plugin</a></li><li><a href="http://oomusou.io/angular/angular-di/">深入探討 Angular 的 DI 與 Provider</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Maven </tag>
            
            <tag> Integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透過 Angular 路由建立 SPA 網站</title>
      <link href="/blog/2017/04/24/Angular-simple-routing/"/>
      <url>/blog/2017/04/24/Angular-simple-routing/</url>
      
        <content type="html"><![CDATA[<h4 id="程式碼範例-Angular-SpringMVC-Integration"><a href="#程式碼範例-Angular-SpringMVC-Integration" class="headerlink" title="程式碼範例 Angular-SpringMVC-Integration"></a><em>程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/commit/688659d58e5e4067a511a4b2819707e0caecaabe">Angular-SpringMVC-Integration</a></em></h4><h3 id="建立-Angular-專案及頁面元件"><a href="#建立-Angular-專案及頁面元件" class="headerlink" title="建立 Angular 專案及頁面元件"></a>建立 Angular 專案及頁面元件</h3><ol><li>透過 Angular CLI 建立專案 <code>ng new SampleProject --routing</code><br> <code>--routing</code> 加入路由機制，會自動建立 <code>app-routing.module.ts</code></li><li>透過 Angular CLI 建立元件 <code>ng g c pages/page1 --spec false</code> 及 <code>ng g c pages/page2 --spec false</code> 在 pages 下建立兩個 Component</li><li>修改 <code>app-routing.module.ts</code> 設定路由<span id="more"></span><img src="/blog/2017/04/24/Angular-simple-routing/step3.png" class="inline"></li><li>修改 <code>app.component.html</code> 加入路由連結 及 路由插座(?XD)<br><code>[routerLinkActiveOptions]=&quot;&#123; exact: true &#125;&quot;</code> 必須是根路徑才套用 active class <img src="/blog/2017/04/24/Angular-simple-routing/step4.png" class="inline"></li><li>修改 <code>app.component.css</code> 加入 active class，利於辨識路由運作<br><img src="/blog/2017/04/24/Angular-simple-routing/step5.png" class="inline"></li><li>透過 <code>npm start</code> 確認實際運作情形<br><img src="/blog/2017/04/24/Angular-simple-routing/step6.gif" class="inline"></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://angular.io/docs/ts/latest/guide/router.html">ROUTING &amp; NAVIGATION</a></li><li><a href="https://www.youtube.com/watch?v=sQx9s6fGI8E">使用 Angular 2 Router 快速建構 SPA 網站</a><ul><li>投影片 <a href="https://www.slideshare.net/WillHuangTW/build-spa-website-with-angular-2-router">https://www.slideshare.net/WillHuangTW/build-spa-website-with-angular-2-router</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 呼叫遠端 API</title>
      <link href="/blog/2017/04/23/Angular-proxy-to-backend-rest/"/>
      <url>/blog/2017/04/23/Angular-proxy-to-backend-rest/</url>
      
        <content type="html"><![CDATA[<p>Angular 內建的 <a href="https://angular.io/docs/ts/latest/api/http/index/Http-class.html">Http</a> 可幫助我們呼叫遠端 API，<br>搭配 Angular CLI 工具更可以快速建立 Angular 開發環境，由於前後端會分別開發 (不是說 Eclipse 不好用，是 VSCode 真的太好用…XD)<br>因此我們可以透過內建的 proxy 機制，幫助我們在開發時期呼叫遠端 API</p><span style="font-size: 1.3em;font-weight:bold;">程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/commit/bec178cc3656973c5159bc1fc838a9f270f05741">Angular-SpringMVC-Integration</a></span><h3 id="前置動作-建立-RESTful-程式"><a href="#前置動作-建立-RESTful-程式" class="headerlink" title="前置動作 - 建立 RESTful 程式"></a>前置動作 - 建立 RESTful 程式</h3><p>可以參考 <a href="/blog/2017/04/23/spring-boot-rest/" title="使用 SpringBoot 建立 RESTful 程式">使用 SpringBoot 建立 RESTful 程式</a> 建立 RESTful API， 或是到<a href="http://data.gov.tw/">政府資料開放平臺</a>或<a href="http://data.taipei/">臺北市政府資料開放平台</a>尋找可用的API，如<a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&rid=55ec6d6e-dc5c-4268-a725-d04cc262172b">臺北捷運列車到站站名</a></p><h3 id="建立-Angular-專案"><a href="#建立-Angular-專案" class="headerlink" title="建立 Angular 專案"></a>建立 Angular 專案</h3><p>接著我們在該 Mavne 專案根目錄下，透過 Angular CLI 建立專案 <code>ng new SampleProject --routing --directory front --skip-git</code></p><ul><li><code>SampleProject</code> 為專案名稱，這邊跟 Maven 專案採用相同命名</li><li><code>--routing</code> 加入路由機制，會自動建立 <code>app-routing.module.ts</code></li><li><code>--directory front</code> 將 Angular 專案放置於 front 資料夾內</li><li><code>--skip-git</code> 省略初始化 Git repository，因為版控做在 Maven 專案上</li></ul><p>接著就會自動安裝 node_modules，安裝好後切到 Angular 專案內，執行 <code>npm start</code> 並打開瀏覽器連至 <code>http://localhost:4200</code> 確認專案正常執行 <img src="/blog/2017/04/23/Angular-proxy-to-backend-rest/app-works.png" class="inline"></p><h3 id="透過-Http-呼叫遠端-RESTful-API"><a href="#透過-Http-呼叫遠端-RESTful-API" class="headerlink" title="透過 Http 呼叫遠端 RESTful API"></a>透過 <a href="https://angular.io/docs/ts/latest/api/http/index/Http-class.html">Http</a> 呼叫遠端 RESTful API</h3><p>修改 app.component.ts 檔案注入 Http 服務元件，接著在 <code>ngOnInit</code> 呼叫遠端 RESTful API <img src="/blog/2017/04/23/Angular-proxy-to-backend-rest/step1.png" class="inline"></p><h3 id="呈現呼叫結果"><a href="#呈現呼叫結果" class="headerlink" title="呈現呼叫結果"></a>呈現呼叫結果</h3><p>修改 app.component.html 把呼叫結果印出來<br><a href="https://angular.io/docs/ts/latest/api/common/index/AsyncPipe-pipe.html">AsyncPipe</a> 執行 <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/subscribe.md">Observable.subscribe</a><br><a href="https://angular.io/docs/ts/latest/api/common/index/JsonPipe-pipe.html">JsonPipe</a> 把 JSON 物件透過 <code>JSON.stringify()</code> 輸出 <img src="/blog/2017/04/23/Angular-proxy-to-backend-rest/step2.png" class="inline"></p><h3 id="設定-api-proxy"><a href="#設定-api-proxy" class="headerlink" title="設定 api proxy"></a>設定 api proxy</h3><p>在 Angular 專案目錄下建立 <code>proxy.conf.json</code> 檔案，內容如下 <img src="/blog/2017/04/23/Angular-proxy-to-backend-rest/step3.png" class="inline"></p><ul><li><code>/api</code> 為啟用 proxy 網址</li><li><code>target</code> 為實際遠端 API 網址</li><li><code>secure</code> 設為 false，不檢查 SSL 憑證<br>以此範例來講，原本 <code>http://localhost:4200/api/</code> 會改為連線至 <code>http://localhost:8080/SampleProject/api/</code><br>更多資訊可以參考 <a href="https://webpack.github.io/docs/webpack-dev-server.html#proxy">webpack-dev-server proxy settings</a> 及 <a href="https://github.com/chimurai/http-proxy-middleware#http-proxy-options">http-proxy-middleware</a></li></ul><h3 id="讀取-proxy-conf-json"><a href="#讀取-proxy-conf-json" class="headerlink" title="讀取 proxy.conf.json"></a>讀取 <code>proxy.conf.json</code></h3><p>修改 <code>package.json</code> 在 <code>start</code> 之後加上 <code> --proxy-config proxy.conf.json</code> 指定讀取 <code>proxy.conf.json</code></p><img src="/blog/2017/04/23/Angular-proxy-to-backend-rest/step4.png" class="inline"><p>透過以上設定，即可將 Angular 開發伺服器的 API 請求導到遠端 RESTful API了！ p.s 原本遠端 RESTful API 並未設置 CORS 卻一樣可以運作，實在有點厲害XD</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://blog.miniasp.com/post/2017/02/05/Setup-proxy-to-backend-in-Angular-CLI.aspx">如何在 Angular CLI 建立的 Angular 2 開發環境呼叫遠端 RESTful APIs</a></li><li><a href="https://github.com/angular/angular-cli/wiki/stories-proxy">Proxy To Backend</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 SpringBoot 建立 RESTful 程式</title>
      <link href="/blog/2017/04/23/spring-boot-rest/"/>
      <url>/blog/2017/04/23/spring-boot-rest/</url>
      
        <content type="html"><![CDATA[<p>在開始之前，必須先了解 <a href="https://projects.spring.io/spring-boot/">SpringBoot</a> 是用來做什麼的，我覺得這篇 Blog 比喻得滿生動的XD <a href="https://blog.mimacom.com/introduction-to-spring-boot/">Introduction to Spring Boot</a><br>如果 SpringFramework 是提供原物料(如雞蛋、砂糖、麵粉等)，開發人員還必須自己組裝(而且每個案子都會先做類似的事情)，<br>那麼 SpringBoot 就是直接送上蛋糕，把瑣碎重複的事情全部做好 (當然開發人員仍舊可以透過 Java Configuration 或是 設定檔進行客製化)</p><p>小弟也是最近案子才開始有接觸 SpringBoot，觀念上若有錯誤還請不吝指教…Orz</p><span id="more"></span><h4 id="程式碼範例-Angular-SpringMVC-Integration"><a href="#程式碼範例-Angular-SpringMVC-Integration" class="headerlink" title="程式碼範例 Angular-SpringMVC-Integration"></a><em>程式碼範例 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/commit/5e91cf1b69b393069029314f204e21bc67439c9f">Angular-SpringMVC-Integration</a></em></h4><h3 id="設定-Maven-專案環境"><a href="#設定-Maven-專案環境" class="headerlink" title="設定 Maven 專案環境"></a>設定 Maven 專案環境</h3><p>於 <a href="https://github.com/Coffee0127/Angular-SpringMVC-Integration/commit/3aff0f3830ac9973b660136158441c8b8cdff4ff">pom.xml</a> 加入 SpringBoot 相關設定，並且設定 <code>app.context.name</code> 供後續設定 context path</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app.context.name</span>&gt;</span>SampleProject<span class="tag">&lt;/<span class="name">app.context.name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="設定-Encoding-及-context-path"><a href="#設定-Encoding-及-context-path" class="headerlink" title="設定 Encoding 及 context path"></a>設定 Encoding 及 context path</h3><p>於 <code>src/main/resources</code> 下加入 <code>application.yml</code> 檔案及以下設定，這邊須注意到，因為繼承了 <code>spring-boot-starter-parent</code> POM，因此引用 Maven 變數值是前後使用 <code>@maven.token@</code>，而非 <code>$&#123;maven.token&#125;</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/@app.context.name@</span></span><br></pre></td></tr></table></figure><h3 id="設定-RestController"><a href="#設定-RestController" class="headerlink" title="設定 RestController"></a>設定 RestController</h3><p>程式碼跟之前寫 SpringMVC 類似，不過 Spring 有提供許多新的 Annotation 幫助我們簡化程式碼，如 4.0 之後可使用 <code>@RestController</code> 以簡化 <code>@Controller</code> 及 <code>@ResponseBody</code><br>透過 <code>@requestMapping</code> 設定 RESTful API 的路徑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/cars&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/find&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findCars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 回傳 Cars JSONArray</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&#123;\&quot;id\&quot;:1,\&quot;model\&quot;:\&quot;P...\&quot;&#125;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立主程式"><a href="#建立主程式" class="headerlink" title="建立主程式"></a>建立主程式</h3><p>最後就是寫個 main 方法執行 SpringBoot，打開 <code>http://localhost:8080/SampleProject/api/cars/find</code> 就可以看到前一步指定的回傳資料</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://spring.io/guides/gs/spring-boot/">Building an Application with Spring Boot</a></li><li><a href="http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/html/howto-properties-and-configuration.html#howto-use-short-command-line-arguments">Use ‘short’ command line arguments</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【轉錄】Top 10 Angular VS Code Extensions</title>
      <link href="/blog/2017/04/03/Top-10-Angular-VSCode-Extensions/"/>
      <url>/blog/2017/04/03/Top-10-Angular-VSCode-Extensions/</url>
      
        <content type="html"><![CDATA[<p><strong>※ 本文用於備份好用的 Angular VSCode 外掛及加上小弟對外掛的見解，著作權仍屬 <a href="http://devboosts.com/">http://devboosts.com</a></strong></p><h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a></h3><p>可針對不同的 bracket 加上不同的顏色，我覺得這個不僅用於 Angular，拿來寫 JavaScript 也是很棒的 = ˇ =<span id="more"></span></p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/bracket-colorizer_cicdeq.gif" class="inline"><h3 id="HTML-CSS-Class-Completion"><a href="#HTML-CSS-Class-Completion" class="headerlink" title="HTML CSS Class Completion"></a><a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion">HTML CSS Class Completion</a></h3><p>針對已載入的 css class 自動完成</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/html-class-completion_lb3q2o.gif" class="inline"><h3 id="Angular-2-TypeScript-Emmet"><a href="#Angular-2-TypeScript-Emmet" class="headerlink" title="Angular 2 TypeScript Emmet"></a><a href="https://marketplace.visualstudio.com/items?itemName=jakethashi.vscode-angular2-emmet">Angular 2 TypeScript Emmet</a></h3><p>Angular inline template 內可使用 emmet <em>(不過小弟沒有在寫 inline template，就沒裝了XD)</em></p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/angular2-typescript-emmet_digepq.gif" class="inline"><h3 id="angular2-inline"><a href="#angular2-inline" class="headerlink" title="angular2-inline"></a><a href="https://marketplace.visualstudio.com/items?itemName=natewallace.angular2-inline">angular2-inline</a></h3><p>inline css &amp; template 有醒目標示、自動完成及 hover 提示 <em>(理由同上就沒裝了XD)</em></p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/angular2-inline_yi3evb.gif" class="inline"><h3 id="angular2-switcher"><a href="#angular2-switcher" class="headerlink" title="angular2-switcher"></a><a href="https://marketplace.visualstudio.com/items?itemName=infinity1207.angular2-switcher">angular2-switcher</a></h3><p>可用來快速切換檔案，如 html -&gt; typescrit</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/angular2-switcher_dif1ze.gif" class="inline"><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons">vscode-icons</a></h3><p>使 VSCode 針對 Angular 有特定 icon (讓 VSCode 更好看XD)</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523094/angular-icons_rhqxbp.png" class="inline"><h3 id="TSLint"><a href="#TSLint" class="headerlink" title="TSLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint">TSLint</a></h3><p>針對 TypeScript 的 <a href="https://zh.wikipedia.org/wiki/Lint">Lint</a>，可標註有問題的程式碼及提供快速修正</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523095/tslint_uteshx.gif" class="inline"><h3 id="Angular-2-Snippets"><a href="#Angular-2-Snippets" class="headerlink" title="Angular 2+ Snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=Mikael.Angular-BeastCode">Angular 2+ Snippets</a></h3><p>提供更多的 Angular 程式碼片段</p><h3 id="TypeScript-Hero"><a href="#TypeScript-Hero" class="headerlink" title="TypeScript Hero"></a><a href="https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero">TypeScript Hero</a></h3><p>可用來管理程式碼 import 及 auto import</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/typescript-hero_vxxzuk.gif" class="inline"><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h3><p>檔案路徑的 Intellisense，同樣不僅用於 Angular，拿來寫 JavaScript / HTML / CSS 也是很棒的 = ˇ =</p><img src="http://res.cloudinary.com/dk1rn2kmf/image/upload/v1486523096/path-intelisense_ge4e0u.gif" class="inline"><h3 id="Angular-Language-Service"><a href="#Angular-Language-Service" class="headerlink" title="Angular Language Service"></a><a href="https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&showReviewDialog=true">Angular Language Service</a></h3><p>這個不僅能檢查 Template 中的錯誤，也可以提供更完善的 IntelliSense 提示<br>不過要注意，若 Angular 專案路徑有任何一層「非英文」的路徑名稱，就會讓 Angular Language Service 失效！<br><del>安裝方法可以參考 <a href="https://www.facebook.com/will.fans">Will 保哥</a> 影片教學 <a href="https://www.youtube.com/watch?v=3hUAYNzgzYQ">https://www.youtube.com/watch?v=3hUAYNzgzYQ</a></del><br>=== 2017-04-04 Updated ===<br>VSCode Marketplace 上架囉，不過目前版本(0.1.1)需要 <code>@angular/language-service@4.1.0-beta</code> 和 <code>typescript@2.1.5</code><br>若未升級到 Angular 4.x 的專案需要自行安裝 dependency<br><em>Angular 4.x 專案完全相容 Angular 2.x，這麼好康的事情還不快升級!!XD</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://devboosts.com/2017/02/08/top-10-vs-code-extensions/index.html">Top 10 Angular VS Code Extensions</a></li><li><a href="https://paper.dropbox.com/doc/-Angular-2-VSCode-Kh2w3saOyZtJSHawFoBem">開發 Angular 2 必備 VSCode 擴充套件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Hoisting</title>
      <link href="/blog/2016/11/28/js-hoisting/"/>
      <url>/blog/2016/11/28/js-hoisting/</url>
      
        <content type="html"><![CDATA[<p>=== 2017-02-19 Updated ===<br>因原文寫得不夠清楚<del>(其實是之前亂寫一通)</del>，導致錯誤的理解</p><p>先補上 MDN 的說明：</p><blockquote><p>Hoisting was thought up as a general way of thinking about how execution context (specifically the creation and execution phases) work in JavaScript.<br>For example, hoisting teaches that variable and function declarations are physically moved to the top your coding, but this is not what happens at all.<br>What does happen is the variable and function declarations are put into memory during the compile phase, but stays exactly where you typed it in your coding.  </p><footer><strong>Hoisting</strong><cite><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN</a></cite></footer></blockquote><p>第一段是說 Hoisting 通常被用來理解 JavaScript 的 execution context 如何運行(老實說我現在還是不知道該怎麼翻 context，翻”上下文”總覺得怪怪的…)，分為 creation phase 及 execution phase<br>第二段是說 hoisting 總是教我們把 變數宣告 及 宣告式函數 “物理上” 的提升到最上端，但<strong>實際上不是這麼一回事</strong>！<br>第三段則是說 變數宣告 及 宣告式函數 會在 compile phase 存入記憶體內，但實際上仍舊待在原本程式碼的位置</p><p>最後在 execution phase 時才會逐行執行程式碼。</p><hr><p>這篇是上完<a href="https://www.facebook.com/will.fans">保哥</a>的《JavaScript 開發實戰：核心概念篇》筆記之二 <del>(狀態仍顯示為拖稿)</del></p><p><strong>Hoisting</strong> 翻成中文是提升，在 JavaScript 是要提升什麼呢？</p><p>W3Schools <a href="http://www.w3schools.com/js/js_hoisting.asp">JavaScript Hoisting</a> 是這樣定義的：</p><blockquote><p>Hoisting is JavaScript’s default behavior of moving declarations to the top.</p><footer><strong>JavaScript Hoisting</strong><cite><a href="http://www.w3schools.com/js/js_hoisting.asp">W3Schools</a></cite></footer></blockquote><p>JavaScript 預設會把<strong>宣告(declarations)提升到最上端</strong> 【但不是真的將宣告”物理上”提升】</p><p>即變數可以先使用，後宣告 (這跟一般程式語言不一樣XD)，以下兩段範例程式碼輸出結果是完全相同的</p><ul><li><p>Example 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line"><span class="built_in">console</span>.log(x);     <span class="comment">// print 5</span></span><br><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br></pre></td></tr></table></figure></li><li><p>Example 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line"><span class="built_in">console</span>.log(x);     <span class="comment">// print 5</span></span><br></pre></td></tr></table></figure></li></ul><hr><p>再來談談哪些是<strong>宣告(declarations)</strong></p><ul><li>使用 <code>var</code> 關鍵字宣告的變數</li><li>使用宣告式的具名函數 (如下宣告 foo 的 function)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m a function and my name is &#x27;foo&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>因此以下程式碼也是可以正常執行的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m a function and my name is &#x27;foo&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那麼當 <code>var</code> 跟 <code>function</code> 一起來的時候該怎麼辦呢XD</p><p>幾點原則如下：</p><ol><li><code>var</code> 僅提升變數宣告，而非初始化(Initializations)</li><li><code>function</code> 則是連同函式定義提升</li><li><code>var</code> 跟 <code>function</code> 先宣告者先提升</li></ol><p>看似理解了，但是還是需要多加練習才可以</p><hr><p>請問以下程式碼執行時會回傳什麼?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol><li><p>逐行尋找 <code>var</code> 及 <code>function</code> 宣告，並提升至 function scoped 的最上層。因此先將 <code>var test</code> 提升，初始化仍維持原位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>接著再往下遇到 <code>function test()</code>，一樣提升至 function scoped 最上層 (注意提升後的位置，是在 <code>var test</code> 之後)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>因此這樣便很清楚知道 <code>return test()</code> 會回傳 <code>2</code> &lt;( ‵▽′)b good job</p></li></ol><hr><p>再來一次逐步提升 (其實只是將 test 換個位置而已XD)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol><li><p>提升 <code>var test</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test;</span><br><span class="line"></span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>再來提升 <code>function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>因此這樣便很清楚知道 <code>return test()</code> 會回傳 <code>1</code> &lt;( ‵▽′)b good job<br>很神奇的，明明 <code>function</code> 比較晚宣告，但是最後仍是會回傳 <code>1</code> XD<br>這就是 JavaScript 迷人之處(?)</p></li></ol><hr><p>更多的練習題～ (還是將 test 換個位置而已XD)</p><ul><li><p>Example 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">&#125;)();   <span class="comment">// return 1</span></span><br></pre></td></tr></table></figure></li><li><p>Example 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;)();   <span class="comment">// return 2</span></span><br></pre></td></tr></table></figure></li><li><p>Example 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;)();   <span class="comment">// return 1</span></span><br></pre></td></tr></table></figure></li><li><p>Example 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> test();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;)();   <span class="comment">// return 2</span></span><br></pre></td></tr></table></figure></li></ul><hr><p>由於 JavaScript 允許函式在任何位置使用 <code>var</code> 宣告變數，因此要特別小心 <code>Hoisting</code> 造成的奇怪現象</p><p>其實我們只要養成幾個好習慣</p><ol><li>將所有的變數在 <code>function</code> 一開始的時候即使用 <code>var</code> 宣告 (甚至是 <code>for</code> 迴圈的變數 <code>i</code>)</li></ol><p><strong>若未採用 <code>var</code> 宣告會成為全域變數</strong>，要特別注意！<br>2. 函式採用 <code>函式表示法 (function expression)</code> 方式宣告 (即 <code>var test = function() &#123;&#125;</code>)</p><p>可參考範例 <a href="https://github.com/jquery/jquery/blob/1.6.2/jquery.js">jQuery</a> 25 行開始宣告一堆的變數、72 行宣告了 fcamelCase 函式…等</p><hr><p>=== 2017-02-19 Updated ===<br>由於 <code>var</code> 是屬於 function scoped (或宣告全域變數)，因此到了 ES6 便有了 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/let">let</a> 及 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/const">const</a> 屬於 block scoped (也不會汙染全域變數) 新的宣告關鍵字</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Must-Know </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>畫圖理解 JavaScript value reference</title>
      <link href="/blog/2016/11/26/js-value-reference/"/>
      <url>/blog/2016/11/26/js-value-reference/</url>
      
        <content type="html"><![CDATA[<p>這篇是上完<a href="https://www.facebook.com/will.fans">保哥</a>的《JavaScript 開發實戰：核心概念篇》筆記之一 <del>(狀態顯示為拖稿)</del></p><p>開始之前可以先看看 Stack Overflow 上這篇 <a href="http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language">Is JavaScript a pass-by-reference or pass-by-value language?</a></p><p>看完程式碼好想有點感覺，但真相是仍舊什麼都不懂 (￣□￣|||)a</p><p>以下就用保哥嫡傳畫圖理解來做說明 ㄟ(￣▽￣ㄟ)</p><hr><h4 id="“物件是記憶體中的資料，跟變數關聯，並在執行時期擁有型別”"><a href="#“物件是記憶體中的資料，跟變數關聯，並在執行時期擁有型別”" class="headerlink" title="“物件是記憶體中的資料，跟變數關聯，並在執行時期擁有型別”"></a>“物件是記憶體中的資料，跟變數關聯，並在執行時期擁有型別”</h4><p>開始之前，先準備紙筆繪出以下樣板</p><img src="/blog/2016/11/26/js-value-reference/layout.jpg" class="inline"><p>大致可分為兩區塊：</p><ol><li>程式碼區塊：就是用來寫 JavaScript 程式碼的…XD</li><li>變數、記憶體空間、型別：說明“物件是<strong>記憶體中的資料</strong>，跟<strong>變數</strong>關聯，並在執行時期擁有<strong>型別</strong>”</li></ol><hr><p>在以下程式碼片段執行的過程中，出現過幾個物件？幾個變數？幾種型別？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">a = <span class="string">&quot;a&quot;</span> + a;</span><br></pre></td></tr></table></figure><p>接下來就將程式碼一步一步寫下，並繪製對應圖形～</p><ol><li><p>在程式碼區塊寫上 <code>var a</code>，並於變數畫上 a，因為沒給值因此是 <code>undefined</code>，那 <code>undefined</code> 的型別叫 <code>undefined</code></p><img src="/blog/2016/11/26/js-value-reference/ex1-1.jpg" class="inline"></li><li><p>將 1 assign 給 a，因此記憶體內會產生型別為 <code>number</code> 的 <code>1</code>，並且變數 <code>a</code> 指向 <code>1</code></p><img src="/blog/2016/11/26/js-value-reference/ex1-2.jpg" class="inline"></li><li><p>將字串 a assign 給 a，因此記憶體內會產生型別為 <code>string</code> 的 <code>a</code>，並且變數 <code>a</code> 指向 <code>a</code>；而原本的 <code>1</code> 則會被 GC (Garbage Collection)，因此改為虛線 <img src="/blog/2016/11/26/js-value-reference/ex1-3.jpg" class="inline"></p></li><li><p>等號右邊先執行，因此記憶體內會再產生另一型別為 <code>string</code> 的 <code>a</code> (JavaScript 沒有所謂字串池觀念，因此會產生新的字串)，並且跟原本變數 <code>a</code> 指向的字串 <code>a</code> 相加後產生新的字串 <code>aa</code></p><img src="/blog/2016/11/26/js-value-reference/ex1-4.jpg" class="inline"></li><li><p>並將新產生的字串 <code>aa</code> assign 給 a (原本變數 <code>a</code> 指向的字串 <code>a</code> 及新產生的字串 <code>a</code> 都會被 GC)</p><img src="/blog/2016/11/26/js-value-reference/ex1-5.jpg" class="inline"></li><li><p>最後整理一下圖形 <img src="/blog/2016/11/26/js-value-reference/ex1-6.jpg" class="inline"> 計算一下即可得知程式碼執行過程中，一共產生了 5 個物件、1 個變數、3 個型別 &lt;( ‵▽′)b good job</p></li></ol><p><strong>請注意 <code>undefined</code> 並不會被 GC！</strong> 因為永遠有個變數指向 <code>undefined</code>，即 <code>window.undefined</code></p><hr><p>接下來看看<strong>物件</strong>的圖形又應該怎麼畫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.myKey = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.myKey = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol><li><p>如法炮製先寫上程式碼 <code>window.myKey = 1</code> 以及畫上變數 <code>window</code>，這邊比較不一樣的是在記憶體空間內除了用物件的表示法外，值的部分是另外指向記憶體空間的資料 <img src="/blog/2016/11/26/js-value-reference/ex2-1.jpg" class="inline"></p></li><li><p>將 2 assign 給 myKey，因此記憶體內會產生型別為 <code>number</code> 的 <code>2</code>，並且變數 <code>myKey</code> 指向 <code>2</code>；而原本的 <code>1</code> 則會被 GC <img src="/blog/2016/11/26/js-value-reference/ex2-2.jpg" class="inline"></p></li><li><p>最後整理一下圖形 <img src="/blog/2016/11/26/js-value-reference/ex2-3.jpg" class="inline"></p></li></ol><hr><p>看完以上兩個範例，應該稍微了解圖形應該怎麼畫，再來就是要多練習囉～</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a1</span>: <span class="number">1</span>, <span class="attr">a2</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line">b.push(a);</span><br><span class="line">b.push(a);</span><br><span class="line">b[<span class="number">0</span>][<span class="string">&#x27;a1&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// b[1][&#x27;a1&#x27;] = ???</span></span><br></pre></td></tr></table></figure><ol><li><p>畫上變數 <code>a</code> 、指向的物件及物件的值 <img src="/blog/2016/11/26/js-value-reference/ex3-1.jpg" class="inline"></p></li><li><p>畫上變數 <code>b</code> 及指向的陣列 (注意到 <code>Array</code> 的型別仍舊是 <code>object</code> )</p><img src="/blog/2016/11/26/js-value-reference/ex3-2.jpg" class="inline"></li><li><p>在陣列 <code>b</code> 加入兩次 <code>a</code></p><img src="/blog/2016/11/26/js-value-reference/ex3-3.jpg" class="inline"></li><li><p>將陣列 <code>b</code> 第一個元素的 <code>a1</code> 的值指向 <code>2</code>；而原本的 <code>1</code> 則會被 GC <img src="/blog/2016/11/26/js-value-reference/ex3-4.jpg" class="inline"></p></li><li><p>最後整理一下圖形，即可得知 <code>b[1][&#39;a1&#39;]</code> 是指向 <code>2</code></p><img src="/blog/2016/11/26/js-value-reference/ex3-5.jpg" class="inline"></li></ol><hr><p>更多的練習題～</p><ul><li><p>Example 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a1</span>: <span class="number">1</span>, <span class="attr">a2</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line">b.push(a);</span><br><span class="line">b[<span class="number">0</span>][<span class="string">&#x27;a1&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// a[&#x27;a1&#x27;] = ???</span></span><br></pre></td></tr></table></figure>  <img src="/blog/2016/11/26/js-value-reference/ex4-1.jpg" class="inline"></li><li><p>Example 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// b.x = ???</span></span><br></pre></td></tr></table></figure>  <img src="/blog/2016/11/26/js-value-reference/ex5-1.jpg" class="inline"><ol><li>變數 <code>a</code> 指向新的物件 <code>&#123; x: 2 &#125;</code>，因此不影響變數 <code>b.x</code></li><li>因為變數 <code>b</code> 仍指向物件 <code>&#123; x: 1 &#125;</code> ，因此物件 <code>&#123; x: 1 &#125;</code> 不會被 GC</li></ol></li><li><p>Example 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a1</span>: <span class="number">1</span>, <span class="attr">a2</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">  p.a1 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(a);</span><br><span class="line"><span class="comment">// a.a1 = ???</span></span><br></pre></td></tr></table></figure>  <img src="/blog/2016/11/26/js-value-reference/ex6-1.jpg" class="inline"><ol><li>變數 <code>p</code> 因為是宣告在 <code>function</code> 內，因此當 <code>function</code> 執行完畢會被銷毀</li></ol></li><li><p>Example 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">  p = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(a);</span><br><span class="line"><span class="comment">// a = ???</span></span><br></pre></td></tr></table></figure>  <img src="/blog/2016/11/26/js-value-reference/ex7-1.jpg" class="inline"><ol><li>變數 <code>p</code> 指向的 <code>1</code> 跟原本變數 <code>a</code> 指向的 <code>1</code> 是不同的</li><li>在 <code>function</code> 內產生的 <code>1</code> 和 <code>2</code> 會隨著 <code>function</code> 執行完畢而被 GC</li><li>變數 <code>p</code> 因為是宣告在 <code>function</code> 內，因此當 <code>function</code> 執行完畢會被銷毀</li></ol></li></ul><hr><p>進階題，理解同時 assign (如 <a href="https://github.com/jquery/jquery/blob/1.6.2/jquery.js">jQuery</a> 的 <code>window.jQuery = window.$ = jQuery;</code> )</p><ul><li>Example 5<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// b.x = ???</span></span><br><span class="line"><span class="comment">// a.x = ???</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>畫上變數 <code>a</code> 、指向的物件及物件的值 <img class="inline ex8-1.jpg"></p></li><li><p>畫上變數 <code>b</code> ，並指向變數 <code>a</code> <strong>指向的物件</strong></p><img class="inline ex8-2.jpg"></li><li><p>將【變數 <code>a</code>】及【變數 <code>a</code> 指向的物件 <code>&#123; x: 1&#125;</code> 的變數 <code>x</code>】同時指向新的物件 <code>&#123; x: 2 &#125;</code>；而原本的 <code>1</code> 則會被 GC <img class="inline ex8-3.jpg"></p></li><li><p>最後整理一下圖形，即可得知 <code>b.x</code> 指向 <code>&#123; x: 2 &#125;</code>，而 <code>a.x</code> 則是指向 <code>2</code></p><img class="inline ex8-4.jpg"></li></ol><p>所謂 “一圖抵萬言”，透過圖形理解 JavaScript value reference，可以避免產生很多淺在性的 BUG (即當你想的跟執行的不一致 😂)</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Must-Know </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User Timing API</title>
      <link href="/blog/2016/10/18/User-Timing-API/"/>
      <url>/blog/2016/10/18/User-Timing-API/</url>
      
        <content type="html"><![CDATA[<p>常常在寫 JavaScript 時，會想知道效能到底好不好之類的</p><p>最直覺的方法就是測 JavaScript 執行時間</p><p>開始之前先寫個假裝讓 JavaScript 執行很久的 <code>sleep</code> 函式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + (seconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt;= e) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著在呼叫函式的前後做個時間戳記，以便觀察時間長短</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 設定起始時間戳記</span></span><br><span class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">3</span>);   <span class="comment">// 要測試效能的函式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定結束時間戳記</span></span><br><span class="line">    <span class="keyword">var</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="comment">// 測量時間間隔</span></span><br><span class="line">    <span class="keyword">var</span> duration = end - start;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;taking time: &#x27;</span> + duration + <span class="string">&#x27; ms&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但也因此必須額外付出相對應的代價，最起碼需要宣告 <code>start</code> 變數</p><p>現在，我們可以使用 <code>User Timing API</code> 來實現這件事情<br>同樣必須在呼叫函式前後做時間戳記，只是這次改為使用 <code>window.performance</code> 物件`<br>會使用到的程式碼如下</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark">performance.mark()</a>：設定時間戳記</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure">performance.measure()</a>：測量時間間隔</li><li>取得 <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry">PerformanceEntry</a> 方法有以下三種<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries">performance.getEntries()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName">performance.getEntriesByName()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType">performance.getEntriesByType()</a></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 設定起始時間戳記</span></span><br><span class="line">    performance.mark(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">3</span>);   <span class="comment">// 要測試效能的函式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定結束時間戳記</span></span><br><span class="line">    performance.mark(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">    <span class="comment">// 測量時間間隔</span></span><br><span class="line">    performance.measure(<span class="string">&#x27;myPerformance&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;taking time: &#x27;</span> + performance.getEntriesByName(<span class="string">&#x27;myPerformance&#x27;</span>)[<span class="number">0</span>].duration + <span class="string">&#x27; ms&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>這邊使用 <code>performance.getEntriesByName()</code> 取得 <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry">PerformanceEntry</a> 物件<br>兩個較為重要屬性如下：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime">PerformanceEntry.startTime</a>：紀錄開始時間<ul><li>要特別注意這邊回傳的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">DOMHighResTimeStamp</a>，即從頁面瀏覽起始開始測量的高解析度時間。</li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration">PerformanceEntry.duration</a>：紀錄效能持續間隔</li></ul><p>最後需要清除時間戳記，則是透過 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks">performance.clearMarks()</a>，此方法會清除所有時間戳記。<br>當然若是想清除特定時間戳記，可以傳入你要清除的戳記名稱，例如 <code>performance.clearMarks(&#39;myPerformance&#39;)</code></p><p>對應清除測量結果，則是透過 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures">performance.clearMeasures()</a></p><h3 id="瀏覽器不支援怎麼辦？"><a href="#瀏覽器不支援怎麼辦？" class="headerlink" title="瀏覽器不支援怎麼辦？"></a>瀏覽器不支援怎麼辦？</h3><p>根據 MDN 上面所寫，各瀏覽器支援度如下 <img src="/blog/2016/10/18/User-Timing-API/browser-compatibility.jpg" class="inline"></p><p>不過還好已經有人寫好類似的 API 程式了：<a href="https://gist.github.com/pmeenan/5902672">user-timing-rum.js</a></p><p>透過時間戳記效能追蹤，讓自己撰寫出更好的程式碼 GO!ヾ( ⁰ д ⁰)ﾉ</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance">Performance</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry">PerformanceEntry</a></li><li><a href="https://www.sitepoint.com/10-html5-apis-worth-looking/">10 HTML5 APIs Worth Looking Into</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 小技巧</title>
      <link href="/blog/2016/09/24/js-tips/"/>
      <url>/blog/2016/09/24/js-tips/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 對小弟而言，真是一門似懂非懂的語言XD</p><p>儘管使用 JavaScript 也三年多，但畢竟 Java 後端工程師會用到的仍有限。</p><p>最近到處惡補後，蒐集整理了一些 JavaScript 小技巧，</p><p>一來做個紀錄，增加印象未來也方便複習XD</p><p>二來希望能幫上初學 JavaScript 的朋友們～</p><h3 id="字串轉數字"><a href="#字串轉數字" class="headerlink" title="字串轉數字"></a>字串轉數字</h3><p>假設今天有個數字字串如 ‘1’ 或 ‘3.14159’，要轉成數字可能會用以下幾種方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberStr = <span class="string">&#x27;3.14159&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> number1 = <span class="built_in">Number</span>(numberStr); <span class="comment">// 3.14159</span></span><br><span class="line"><span class="keyword">var</span> number2 = <span class="built_in">parseFloat</span>(numberStr); <span class="comment">// 3.14159</span></span><br></pre></td></tr></table></figure><p>我們也可以使用一個 <code>+</code> 搞定XD <del>工程師是很懶惰的職業，這樣寫才夠短</del></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number3 = +numberStr;  <span class="comment">// 3.14159</span></span><br></pre></td></tr></table></figure><h4 id="浮點數字串轉整數"><a href="#浮點數字串轉整數" class="headerlink" title="浮點數字串轉整數"></a>浮點數字串轉整數</h4><p>還是剛剛那個 ‘3.14159’，今天將其轉成整數 3 的話可以這樣寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number4 = <span class="built_in">Math</span>.floor(numberStr);</span><br><span class="line"><span class="keyword">var</span> number5 = <span class="built_in">parseInt</span>(numberStr);</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>~</code> 這樣寫 <del>工程師真的很懶惰</del></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ~ (Tilde) 運算元是指 -(N+1)</span></span><br><span class="line"><span class="comment"> * example:</span></span><br><span class="line"><span class="comment"> *  ~(-1) = 0</span></span><br><span class="line"><span class="comment"> *  ~(0) = -1</span></span><br><span class="line"><span class="comment"> *  ~1 = -2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> number6 = ~~numberStr;</span><br></pre></td></tr></table></figure><hr><h3 id="簡化字串-indexOf-gt-0"><a href="#簡化字串-indexOf-gt-0" class="headerlink" title="簡化字串 indexOf() &gt;= 0"></a>簡化字串 <code>indexOf() &gt;= 0</code></h3><p>還記得前例的 <code>~(-1) = 0</code> 嗎，因此我們又可以繼續<del>偷懶</del>簡化程式碼了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someStr.indexOf(<span class="string">&#x27;a&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Found</span></span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">    <span class="comment">// Not Found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>~</code> 將其改為</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (~someStr.indexOf(<span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Found</span></span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">    <span class="comment">// Not Found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p.s 這邊應用到的是 JavaScript 的 if 條件為 <code>0</code> 是不成立的</p><hr><h3 id="檢查布林值"><a href="#檢查布林值" class="headerlink" title="檢查布林值"></a>檢查布林值</h3><p>有時需要對一個變數檢查是否存在(或是否有值)，若存在(或有值)則回傳 <code>true</code>。<br>可以使用 <code>!!</code> 做到這件事情，只要該變數的值為：<code>0</code>、<code>null</code>、<code>&#39;&#39;</code>(空字串)、<code>undefined</code>、<code>NaN</code>(Not a Number)、<code>false</code> 都會回傳 <code>false</code>，其餘則會回傳 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(!!foo); <span class="comment">// false</span></span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!foo); <span class="comment">// true</span></span><br><span class="line">foo = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(!!foo); <span class="comment">// true</span></span><br><span class="line">foo = <span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>請注意，變數為字串 ‘false’，在 <code>!!</code> 轉換下仍會變為 <code>true</code></p><hr><h3 id="簡化-if"><a href="#簡化-if" class="headerlink" title="簡化 if"></a>簡化 if</h3><p>如果今天需先檢查某個條件，程式碼如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">    sendMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 <code>&amp;&amp;</code> 來簡化程式碼如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isConnected &amp;&amp; sendMsg();</span><br></pre></td></tr></table></figure><p>如果是要確定物件不是 <code>null</code> 後，呼叫該物件方法也可以這樣寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * if (messenger != null) &#123;</span></span><br><span class="line"><span class="comment"> *     messenger.sendMsg();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">messenger &amp;&amp; messenger.sendMsg();</span><br></pre></td></tr></table></figure><hr><h3 id="替參數設定預設值"><a href="#替參數設定預設值" class="headerlink" title="替參數設定預設值"></a>替參數設定預設值</h3><p>在 ES6 中，有所謂的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">Default parameters</a> 替參數設定初始值<br>萬一瀏覽器不支援 ES6 怎麼辦呢，我們可以使用 <code>||</code> 實現這件事情</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">    i = i || <span class="number">1</span>;</span><br><span class="line">    j = j || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line">add();      <span class="comment">// 3</span></span><br><span class="line">add(<span class="number">10</span>);    <span class="comment">// 12</span></span><br><span class="line">add(<span class="literal">undefined</span>, <span class="number">5</span>);  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><hr><h3 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h3><h4 id="陣列合併"><a href="#陣列合併" class="headerlink" title="陣列合併"></a>陣列合併</h4><p>如果要不靠迴圈合併兩個陣列，一般會使用 <code>Array.concat()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>由於 <code>Array.concat()</code> 是另外建立新的陣列後合併，因此在合併較大陣列時，會大量消耗記憶體….</p><p>為了效能考量，建議使用 <code>Array.prototype.push.apply(arr1, arr2);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果使用 ES6，還可以利用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">展開運算子</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2); <span class="comment">// 沒錯，展開運算子就是&quot;...&quot;XD</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="陣列清空"><a href="#陣列清空" class="headerlink" title="陣列清空"></a>陣列清空</h4><h5 id="宣告一個新的陣列"><a href="#宣告一個新的陣列" class="headerlink" title="宣告一個新的陣列"></a>宣告一個新的陣列</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;  <span class="comment">// 宣告另一變數參照 arr1</span></span><br><span class="line">arr1 = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>此方法雖然簡單，但是若該陣列有被別的變數參照時，會無法清除</p><hr><h5 id="將陣列長度設為-0"><a href="#將陣列長度設為-0" class="headerlink" title="將陣列長度設為 0"></a>將陣列長度設為 0</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;  <span class="comment">// 宣告另一變數參照 arr1</span></span><br><span class="line">arr1.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>若想清除其他也參照此陣列的變數，那麼應該採用此方法</p><hr><h5 id="應該避免的各種方法…"><a href="#應該避免的各種方法…" class="headerlink" title="應該避免的各種方法….!!"></a>應該避免的各種方法….!!</h5><ul><li><p><code>Array.splice()</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line">arr1.splice(<span class="number">0</span>, arr1.length);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// []</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.slice()</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line">arr1 = arr1.slice(arr1.length); <span class="comment">// 需重新 assign</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p><code>while</code> 迴圈 + <code>Array.pop()</code> ，速度最慢，千萬不要這樣寫!!</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line"><span class="keyword">while</span>(arr1.length) &#123;</span><br><span class="line">    arr1.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// []</span></span><br></pre></td></tr></table></figure></li></ul><hr><p>希望這些小技巧能幫助到那些跟我一樣對 JavaScript 不是太熟的朋友們～</p><p>若文章內容有誤，還請不吝指教 &lt;(＿ ＿)&gt;</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 自訂元素</title>
      <link href="/blog/2016/09/20/Angular2-Custom-Element/"/>
      <url>/blog/2016/09/20/Angular2-Custom-Element/</url>
      
        <content type="html"><![CDATA[<p>=== 2017-04-03 Updated ===<br>配合 Angular 正名，因此 Angular 1.x ==&gt; AngularJS，Angular 2.x 之後的版本 ==&gt; Angular<br>修改文章標題 &amp; 分類，內文仍維持原樣 <del>絕對不是偷懶</del></p><hr><p><a href="https://angular.io/">Angular2</a> 終於在 2016-09-15 發布正式版本，</p><p>由於之前使用的 <a href="https://cli.angular.io/">Angular CLI</a> 建立的專案版本為 <code>2.0.0-rc.5</code> 才一直沒注意到這個問題，</p><p>直到今天升級後發現專案直接掛了…XD</p><img src="/blog/2016/09/20/Angular2-Custom-Element/template-parse-errors.jpg" class="inline"><p>錯誤訊息很明顯：<code>&#39;hgroup&#39; is not a known element</code></p><p>由於 Angular2 將網頁視為元件，因此 HTML 標籤都必須是合法的 Directive 元件才行。</p><p>最簡單作法當然是將 hgroup 元素改成用 div 表示即可(無誤)</p><p>若真的必須使用這種非 Angular2 可以接受的標籤，還是可以透過設定讓這些標籤繼續使用</p><hr><p>修改 <code>src/app.module.ts</code>，使用 <code>NO_ERRORS_SCHEMA</code> schema</p><img src="/blog/2016/09/20/Angular2-Custom-Element/import-module.jpg" class="inline"><p>根據官方說明，schemas 可傳入兩種 <code>SchemaMetadata</code></p><ul><li><code>NO_ERRORS_SCHEMA</code>：允許任意元素及屬性</li><li><code>CUSTOM_ELEMENTS_SCHEMA</code>：允許元素名稱中帶減號(-)的任意元素</li></ul><p>設定完成後，畫面即正常運作了～</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://blog.miniasp.com/post/2016/09/19/Angular-2-Custom-Element-Tips.aspx">Angular 2 開發心得分享 (01)：使用 HTML 自訂元素的注意事項</a></li><li><a href="https://angular.io/docs/ts/latest/api/core/index/NgModule-interface.html">Angular2 NgModule</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象類別 (Abstract Class) vs 介面 (Interface)</title>
      <link href="/blog/2016/09/10/abstract-class-vs-interface/"/>
      <url>/blog/2016/09/10/abstract-class-vs-interface/</url>
      
        <content type="html"><![CDATA[<p>許多人初學 Java 時，或許難以理解 <em>抽象類別</em> 和 <em>介面</em> 的差異，<br>簡單整理摘要如下，若有誤還望各位先進指點 Orz</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="抽象類別-Abstract-Class"><a href="#抽象類別-Abstract-Class" class="headerlink" title="抽象類別 (Abstract Class)"></a>抽象類別 (Abstract Class)</h3><ol><li>使用 <code>abstract</code> 定義抽象類別 (不得宣告為 <code>final class</code>)</li><li>無法實體化的類別 (即無法透過 <code>new</code> 關鍵字產生實體)<br> 或許會看到如下這種程式碼<ul><li>AbstractFooClz.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractFooClz &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doBar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>TestMain.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> AbstractFooClz() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;do foo here.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.doFoo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>這是屬於匿名類別，終究不是原本的抽象類別，因此要特別注意！(小弟曾認為這也是 <code>new AbstractFooClz</code> 的一種…)</li></ul></li><li>專門被拿來當作父類別的類別，具有範本作用</li><li>只能被繼承 (使用 <code>extends</code> 關鍵字)，子類別需實作抽象方法 (否則繼續抽象下去)</li><li>其__抽象方法 (abstract method)__封裝等級不能是 <code>private</code> (即必須是 <code>public/protected/(default)</code>)<br> <code>abstract 回傳值型別 抽象方法名稱(參數列);</code>   // 沒有方法實體，以 ; 做結尾</li><li>包含抽象方法的類別，一定要宣告為抽象類別；但是抽象類別不一定有抽象方法</li></ol><h3 id="介面-Interface"><a href="#介面-Interface" class="headerlink" title="介面 (Interface)"></a>介面 (Interface)</h3><ol><li>定義屬性成員皆為常數 (即預設 <code>public static final</code>)，因此必須給定初始值</li><li>定義方法時，只能為抽象方法 (即預設 <code>public abstract</code>，定義功能的名稱，實作部分留給相關類別 override<ul><li>IBar.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MY_NUMBER = <span class="number">0</span>;  <span class="comment">// 編譯器視為 public static final int MY_NUMBER = 0;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doBar</span><span class="params">()</span></span>;       <span class="comment">// 編譯器視為 public abstract void doBaz();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Java8 開始多了 <code>default</code> 關鍵字，可替介面加上預設實作，範例如下<br>(小弟目前還沒有 Java8 開發經驗，還望各位先進指點實務上如此設計之意義)</li><li>IBaz.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="title">doBaz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;only Java8 can do default baz here.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>　</li></ul></li><li>不一定需要定義方法，即空介面 (ex: <code>java.io.Serializable</code>)</li><li>只能被實作 (使用 <code>implements</code> 關鍵字)，子類別需實作抽象方法 (否則需宣告為抽象類別)</li><li>子類別實作抽象方法修飾字必須是 <code>public</code> (抽象方法預設使用 <code>public</code> 修飾)</li></ol><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><h3 id="相同點"><a href="#相同點" class="headerlink" title="相同點"></a>相同點</h3><ol><li>兩者都無法直接實體化</li><li>子類別都必須實作已宣告之抽象方法 (或繼續抽象)</li></ol><h3 id="相異點"><a href="#相異點" class="headerlink" title="相異點"></a>相異點</h3><table><thead><tr><th></th><th>抽象類別 Abstract Class</th><th>介面 Interface</th></tr></thead><tbody><tr><td>父類別/父介面 繼承</td><td>只能繼承一個類別</td><td>能繼承多個介面 (Java實現多重繼承)</td></tr><tr><td>子類別 繼承/實作</td><td>只能繼承 (<code>extends</code>) 一個抽象類別</td><td>能實作 (<code>implements</code>) 多個介面</td></tr><tr><td>方法</td><td>可包含非抽象方法</td><td>只能是抽象方法 (Java8以前…XD)</td></tr><tr><td>應用</td><td>關係密切的類別中<br>如定義抽象類別 <code>Car</code><br>子類別 <code>Benz</code> 及 <code>Audi</code> 繼承 <code>Car</code></td><td>定義一些功能給較不相干類別使用<br>如定義介面飛翔 <code>Fly</code><br>子類別 <code>AirPlane</code> 及 <code>Bird</code> 實作 <code>Fly</code><br><strong>但實務上其實不會不相干類別實作同一介面</strong></td></tr><tr><td></td><td>必定為父類別</td><td>可視為抽象類別的特例</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html">Abstract Methods and Classes</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html">Interfaces</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse Properties 顯示中文字</title>
      <link href="/blog/2016/08/15/eclipse-poperties/"/>
      <url>/blog/2016/08/15/eclipse-poperties/</url>
      
        <content type="html"><![CDATA[<p>做專案時，往往需要做國際化 (internationalization，簡稱 i18n，因為總共18個字 XD)</p><p>Java 存放這些多國語言檔案使用 properties 檔案，由於該檔案採用 ISO-8859-1 編碼，</p><p>Eclipse 針對那些非英文字會自動轉換為 Unicode，如下圖所示</p><p>輸入階段仍是中文字 <img src="/blog/2016/08/15/eclipse-poperties/before.jpg" class="inline"></p><p>一旦確認後，就<del>是見證奇蹟的時刻</del>自動轉成 Unicode 了 <img src="/blog/2016/08/15/eclipse-poperties/after.jpg" class="inline"></p><p>雖然滑鼠移上去時，可以看到中文字 <img src="/blog/2016/08/15/eclipse-poperties/hint.jpg" class="inline"></p><p>但是如果檔案有上萬行，豈不是看到眼花(￣□￣|||)a</p><p>還好已經有人將外掛開發出來了，我們只需將其安裝到 Eclipse 即可~</p><h3 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h3><ol><li><p>Eclipse -&gt; Help -&gt; Install New Software…</p></li><li><p>點選 Add…</p></li><li><p>Name: Properties Editor Location: <a href="http://propedit.sourceforge.jp/eclipse/updates/">http://propedit.sourceforge.jp/eclipse/updates/</a></p><img src="/blog/2016/08/15/eclipse-poperties/step1.jpg" class="inline"> 讓 Eclipse 搜尋一下...</li><li><p>勾選 <code>PropertiesEditor</code><br><code>PropertiesEditor_Asian_NLS</code> 是否安裝外掛多國語言 (非必要)</p><img src="/blog/2016/08/15/eclipse-poperties/step2.jpg" class="inline"></li><li><p>接著就是 Eclipse 安裝 plugin 時一些同意條款說明</p></li><li><p>安裝完成後，在 Eclipse -&gt; Window -&gt; Preferences 即可看見 <code>Properties Editor</code><br/><img src="/blog/2016/08/15/eclipse-poperties/step3.jpg" class="inline" width="600"> 若有安裝多國語言則如圖<br/> <img src="/blog/2016/08/15/eclipse-poperties/step3-zh.jpg" class="inline"></p></li><li><p>使用外掛提供的 <code>PropertiesEditor</code> 開啟 properties 檔案即可看見中文了 <img src="/blog/2016/08/15/eclipse-poperties/step4.jpg" class="inline"></p></li><li><p>使用預設的編輯器看，卻仍舊是 Unicode<br/></p><img src="/blog/2016/08/15/eclipse-poperties/step5.jpg" class="inline"></li><li><p>若不想將註解也轉為 Unicode，則在 Preferences 裡面勾選 Convert Option 的第二個選項 <img src="/blog/2016/08/15/eclipse-poperties/step6-1.jpg" class="inline"> 註解不再轉為 Unicode<br/><img src="/blog/2016/08/15/eclipse-poperties/step6-2.jpg" class="inline"></p><p>若整份 properties 都不需轉為 unicode 則勾選第一個選項。 Ｑ：何時會用？ Ａ：<a href="https://www.zkoss.org/wiki/ZK_Developer's_Reference/Internationalization/Labels">ZK i18n</a>，由於 ZK i18n 讀取的 properties 檔案編碼為 UTF-8，因此不需額外轉為 Unicode</p></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://openhome.cc/Gossip/Rails/i18n.html">簡介 i18n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 相關文章摘要</title>
      <link href="/blog/2016/08/11/hexo-abstract-of-related-post/"/>
      <url>/blog/2016/08/11/hexo-abstract-of-related-post/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="/blog/2016/08/09/hexo-configuration/" title="Hexo 相關設定">Hexo 相關設定</a> 有跟各位介紹過“加入相關文章”功能，</p><p>老實說小弟覺得只有標題實在是太空洞了，因此看看原本的 <a href="https://github.com/nkmk/hexo-list-related-posts">hexo-list-related-posts</a> 是否有相關功能</p><p><del>測試了一下發現其實是有的，只不過原作者並未提供 API 讓人使用，那就只好自己來囉&lt;(￣︶￣)&gt;</del><br>=== 2016-09-11 Updated ===<br>原作者已接受 PR，因此不需要再自行修改。不過沒有設置 tags 導致的錯誤，原作者並未修復，因此還是要修改一下XD</p><h3 id="安裝-striptags"><a href="#安裝-striptags" class="headerlink" title="安裝 striptags"></a>安裝 striptags</h3><p>先確認你的 <code>&lt;repository&gt;/node_modules/</code> 是否有 <code>striptags</code> 模組，<br>若未看見該模組再透過以下指令安裝<br><code>$ npm install striptags</code></p><h3 id="修改-hexo-list-related-posts"><a href="#修改-hexo-list-related-posts" class="headerlink" title="修改 hexo-list-related-posts"></a>修改 <code>hexo-list-related-posts</code></h3><p>檔案路徑為 <code>&lt;repository&gt;/node_modules/hexo-list-related-posts/lib/index.js</code><br>查閱小弟發給原作者的 <a href="https://github.com/nkmk/hexo-list-related-posts/pull/3/commits/80e9739cb525f9907881d243bd04b90f6a2264d0#diff-1">pull request</a> 會比較容易理解差異</p><ol><li>引入 <code>striptags</code> 模組<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> striptags = <span class="built_in">require</span>(<span class="string">&#x27;striptags&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>修改 function listRelatedPosts 的 options，程式碼如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">options = assign(&#123;</span><br><span class="line">  <span class="attr">maxCount</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">ulClass</span>: <span class="string">&#x27;related-posts&#x27;</span>,</span><br><span class="line">  <span class="attr">liClass</span>: <span class="string">&#x27;related-posts-item&#x27;</span>,</span><br><span class="line">  <span class="attr">generateAbstract</span>: <span class="literal">false</span>,    <span class="comment">// 是否產生摘要</span></span><br><span class="line">  <span class="attr">abstractClass</span>: <span class="string">&#x27;related-posts-item-abstract&#x27;</span>,   <span class="comment">// 摘要的 css class</span></span><br><span class="line">  <span class="attr">abstractLength</span>: <span class="number">110</span>,        <span class="comment">// 摘要節錄長度</span></span><br><span class="line">  <span class="attr">orderBy</span>: <span class="string">&#x27;date&#x27;</span>,</span><br><span class="line">  <span class="attr">isAscending</span>: <span class="literal">false</span></span><br><span class="line">&#125;, options);</span><br></pre></td></tr></table></figure></li><li>修改function listRelatedPosts 的呈現方式 (在原 function 最末端)，程式碼如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(count === <span class="number">0</span>)&#123;</span><br><span class="line">  result += <span class="string">&#x27;&lt;p&gt;No related post.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  result += <span class="string">&#x27;&lt;ul class=&quot;&#x27;</span> + options.ulClass + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (options.generateAbstract) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      result += <span class="string">&#x27;&lt;li class=&quot;&#x27;</span> + options.liClass + <span class="string">&#x27;&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + root + postList[i].path + <span class="string">&#x27;&quot;&gt;&#x27;</span> + postList[i].title + <span class="string">&#x27;&lt;/a&gt;&lt;div class=&quot;&#x27;</span> + options.abstractClass + <span class="string">&#x27;&quot;&gt;&#x27;</span> + striptags(postList[i].content).substring(<span class="number">0</span>, options.abstractLength) + <span class="string">&#x27;&lt;/div&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      result += <span class="string">&#x27;&lt;li class=&quot;&#x27;</span> + options.liClass + <span class="string">&#x27;&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + root + postList[i].path + <span class="string">&#x27;&quot;&gt;&#x27;</span> + postList[i].title + <span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改文章沒有設置 tags 發生錯誤<br>大家要乖乖替文章加上 tag 啊 (誤)<br>參考另一段 <a href="https://github.com/nkmk/hexo-list-related-posts/pull/2/files">pull request</a> 加上檢查即可，程式碼如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.post.tags &amp;&amp; <span class="built_in">this</span>.post.tags.each(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>)</span>&#123;</span><br><span class="line">  tag.posts.each(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>)</span>&#123;</span><br><span class="line">    postList.push(post);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="加入-generateAbstract-true"><a href="#加入-generateAbstract-true" class="headerlink" title="加入 generateAbstract: true"></a>加入 <code>generateAbstract: true</code></h3><p>修改 <code>themes/[主题名]/layout/_partial/post/related.ejs</code>  (在 <a href="/blog/2016/08/09/hexo-configuration/" title="Hexo 相關設定">Hexo 相關設定</a> 新增的檔案)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_related_posts(&#123;<span class="attr">maxCount</span>: <span class="number">5</span>, <span class="attr">orderBy</span>: <span class="string">&#x27;random&#x27;</span>, <span class="attr">generateAbstract</span>: <span class="literal">true</span>&#125;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="加入-CSS"><a href="#加入-CSS" class="headerlink" title="加入 CSS"></a>加入 CSS</h3><p>修改 <code>themes/&lt;主題名稱&gt;/source/css/_partial/article.styl</code>，加入以下樣式<br>重點在於 <code>text-overflow: ellipsis</code> 讓多餘的文字以 <code>...</code> 方式呈現</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.related-posts</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">list-style</span>: none</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-class">.related-posts-item</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.related-posts-item-abstract</span></span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">white-space</span>: nowrap</span><br><span class="line">      <span class="attribute">text-overflow</span>: ellipsis</span><br><span class="line">      <span class="attribute">color</span>: rgb(<span class="number">136</span>, <span class="number">136</span>, <span class="number">136</span>)</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">85%</span></span><br></pre></td></tr></table></figure><p>這個<del>世界</del>相關文章不再這麼空洞了 (=´∀｀)人(´∀｀=)</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 分享連結失效</title>
      <link href="/blog/2016/08/10/hexo-share-link-fix/"/>
      <url>/blog/2016/08/10/hexo-share-link-fix/</url>
      
        <content type="html"><![CDATA[<p>=== 2021-07-11 Updated === Hexo 更新後此問題已修正囉</p><hr><p>今天想來試試看分享功能，結果 FB 連結分享出來的卻是 404….XD</p><p>看了一下分享的網址 <a href="https://coffee0127.github.io/blog/blog/2016/08/09/hexo-configuration/">https://coffee0127.github.io/blog/blog/2016/08/09/hexo-configuration/</a></p><p>欸 怎麼網址長出了兩個 <code>/blog</code> (￣□￣|||)a</p><p>Google 了一下發現官網有人提出了一樣的問題 <a href="https://github.com/hexojs/hexo/issues/1812">share link wrong with sub path</a></p><p>還好底下有人提供解決方案，或許之後版本作者就會修正了 (小弟使用 Hexo 版本為 3.2.2)</p><p>解決方法其實也不難，僅需修改 <code>hexo/lib/models/post.js</code> 即可</p><p>確切路徑為 <code>&lt;your_repository&gt;/node_modules/hexo/lib/models/post.js</code></p><p>將 57 行開始程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Post.virtual(<span class="string">&#x27;permalink&#x27;</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = ctx.config;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config.url + config.root + <span class="built_in">this</span>.path;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改為以下即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Post.virtual(<span class="string">&#x27;permalink&#x27;</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url_for = ctx.extend.helper.get(<span class="string">&#x27;url_for&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> config = ctx.config;</span><br><span class="line">  <span class="keyword">var</span> partial_url = url_for.call(ctx, <span class="built_in">this</span>.path);</span><br><span class="line">  <span class="keyword">return</span> config.url + _.replace(partial_url, config.root, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之後重新產生新的 Blog 網頁即可</p><p>p.s 僅針對 Blog 放在子資料夾內的才需修改 (好比小弟之類的…XD)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://coffee0127.github.io/blog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/hexojs/hexo/blob/master/lib/models/post.js#L59">https://github.com/hexojs/hexo/blob/master/lib/models/post.js#L59</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 相關設定</title>
      <link href="/blog/2016/08/09/hexo-configuration/"/>
      <url>/blog/2016/08/09/hexo-configuration/</url>
      
        <content type="html"><![CDATA[<p>經過前兩篇 <a href="/blog/2016/08/08/how-to-install-hexo/" title="Hexo 安裝">Hexo 安裝</a> &amp; <a href="/blog/2016/08/09/how-to-deploy-to-git/" title="Hexo 佈署">Hexo 佈署</a></p><p>我們已經可以開始編寫 Blog 了&lt;(￣︶￣)&gt;</p><p>但是還是過於陽春，因此這篇會講些簡單設定 Hexo，看起來更有模有樣。</p><h3 id="網頁-Icon"><a href="#網頁-Icon" class="headerlink" title="網頁 Icon"></a>網頁 Icon</h3><p><em>Icon 代表著網站的精神呢，這當然很重要啊ˋ(′ε‵”)ˊ</em></p><ol><li>將你的 <code>favicon.ico</code> 放置於 <code>source</code> 資料夾下</li><li>修改 <code>themes/&lt;主題名稱&gt;/_config.yml</code> 的 favicon 為 <code>favicon.ico</code> (若你圖示名稱是 favicon.png，這步驟可省略)</li><li>修改 <code>themes/&lt;主題名稱&gt;/layout/_partial/head.ejs</code>，加入 context root url<br> 將 <code>&lt;link rel=&quot;icon&quot; href=&quot;&lt;%- theme.favicon %&gt;&quot;&gt;</code> 修改為 <code>&lt;link rel=&quot;icon&quot; href=&quot;&lt;%- config.root %&gt;&lt;%- theme.favicon %&gt;&quot;&gt;</code> 即可</li></ol><h3 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h3><ul><li>方法一：文章中加入 <code>&lt;!--more--&gt;</code> 即可 (但是需要自行設置，頗麻煩)</li><li>方法二：參考  <a href="https://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/">Hexo自动添加ReadMore标记</a>，修改 <code>themes/[主题名]/layout/_partial/article.ejs</code>，<br>但該篇提供之方法只會於首頁處顯示第一段落，稍微修改成可以決定要顯示的行數 (即 <code>const THRESH_HOLD = 5</code>)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">  &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;</span><br><span class="line">    &lt;%- post.excerpt %&gt;</span><br><span class="line">    &lt;% if (theme.excerpt_link)&#123; %&gt;</span><br><span class="line">      &lt;p class=&quot;article-more-link&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;#more&quot;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;%- post.content %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>  修改為  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">  &lt;% if (post.excerpt &amp;&amp; index) &#123; %&gt;</span><br><span class="line">    &lt;%- post.excerpt %&gt;</span><br><span class="line">    &lt;% if (theme.excerpt_link) &#123; %&gt;</span><br><span class="line">      &lt;p class=&quot;article-more-link&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%=url_for(post.path)%&gt;#more&quot;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;% if (!index &amp;&amp; post.toc) &#123; %&gt;</span><br><span class="line">      &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">        &lt;strong class=&quot;toc-title&quot;&gt;文章目錄&lt;/strong&gt;</span><br><span class="line">        &lt;%- toc(post.content) %&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">       const THRESH_HOLD = 5;   // 要出現的段落數</span><br><span class="line">       var newLines = (post.content.match(/\n/g) || []).length;</span><br><span class="line">       var indexOfThreshHold = -1;</span><br><span class="line">       for (var i = 0; i &lt; THRESH_HOLD; i++) &#123;</span><br><span class="line">         indexOfThreshHold = post.content.indexOf(&#x27;\n&#x27;, indexOfThreshHold + 1);</span><br><span class="line">       &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;% if (newLines &lt; THRESH_HOLD || !index) &#123; %&gt;</span><br><span class="line">      &lt;%- post.content %&gt;</span><br><span class="line">    &lt;% &#125; else &#123; %&gt;</span><br><span class="line">      &lt;%- post.content.substring(0, indexOfThreshHold) %&gt;</span><br><span class="line">      &lt;% if (theme.excerpt_link) &#123; %&gt;</span><br><span class="line">        &lt;p class=&quot;article-more-link&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&lt;%=url_for(post.path)%&gt;&quot;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="加入評論"><a href="#加入評論" class="headerlink" title="加入評論"></a>加入評論</h3><ol><li>先到 <a href="http://disqus.com/">Disqus</a> 註冊帳號後，在 Create New Site 時 ，會根據你的 WebSite Name 提供對應的 Short Name，也可以自訂 Shortname</li><li>修改 <code>_config.yml</code>，加入以下資訊後，即可生效。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disqus</span><br><span class="line">disqus_shortname: &lt;剛剛申請的 Shortname&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="加入相關文章"><a href="#加入相關文章" class="headerlink" title="加入相關文章"></a>加入相關文章</h3><ol><li>透過以下指令安裝 <a href="https://github.com/nkmk/hexo-list-related-posts">hexo-list-related-posts</a><br><code>$ npm install hexo-list-related-posts --save</code></li><li>修改 <code>themes/&lt;主題名稱&gt;/layout/_partial/article.ejs</code>，找到 <code>&lt;%- partial(&#39;post/nav&#39;) %&gt;</code> 並於前一段落加入 <code>partial(&#39;post/related&#39;)</code></li><li>接著在 <code>themes/landscape/layout/_partial/post</code> 新增 <code>related.ejs</code> 檔案 (對應前一步驟之檔名)</li><li>相關文章樣式版型可再依個人喜好自行修改，主要程式碼為 <code>&lt;%- list_related_posts([options]) %&gt;</code>，小弟目前樣式為<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;article class=&quot;article&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;article-inner&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;article-header&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;article-title&quot; style=&quot;font-size: 20px;&quot;&gt;相關文章&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;article-entry&quot;&gt;</span><br><span class="line">      &lt;%- list_related_posts(&#123;maxCount: 5, orderBy: &#x27;random&#x27;&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure>並且在 <code>themes/&lt;主題名稱&gt;/source/css/_partial/article.styl</code> 加入樣式<figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.related-posts-item</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="加入-TOC-Table-Of-Content"><a href="#加入-TOC-Table-Of-Content" class="headerlink" title="加入 TOC ( Table Of Content )"></a>加入 TOC ( Table Of Content )</h3><ol><li>修改 <code>themes/&lt;主題名稱&gt;/layout/_partial/article.ejs</code>，找到 <code>&lt;%- post.content %&gt;</code> 並於前一段落加入以下程式碼<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt;</span><br><span class="line">  &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">    &lt;strong class=&quot;toc-title&quot;&gt;文章目錄&lt;/strong&gt;</span><br><span class="line">    &lt;%- toc(post.content) %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>其中 <code>!index</code> 讓首頁摘要不產生目錄，<code>post.toc</code> 則是需於文章設定 <code>toc: true</code> 才生效</li><li>修改樣式，<code>themes/&lt;主題名稱&gt;/source/css/_partial/article.styl</code>，於最末端加入以下 CSS 樣式，依個人喜好微調<figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*toc*/</span></span><br><span class="line"><span class="selector-class">.toc-article</span></span><br><span class="line">  <span class="attribute">background</span> <span class="number">#eee</span></span><br><span class="line">  <span class="attribute">border</span> <span class="number">1px</span> solid <span class="number">#bbb</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">10px</span></span><br><span class="line">  <span class="attribute">margin</span> <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0.3em</span> <span class="number">1.5em</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">1.2em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">1em</span></span><br><span class="line">  <span class="attribute">max-width</span> <span class="number">28%</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-title</span></span><br><span class="line">  <span class="attribute">font-size</span> <span class="number">120%</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#toc</span></span><br><span class="line">  <span class="attribute">line-height</span> <span class="number">1em</span></span><br><span class="line">  <span class="attribute">font-size</span> <span class="number">0.9em</span></span><br><span class="line">  <span class="attribute">float</span> right</span><br><span class="line">  <span class="selector-class">.toc</span></span><br><span class="line">    <span class="attribute">padding</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">1em</span></span><br><span class="line">    <span class="attribute">line-height</span> <span class="number">1.8em</span></span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">      <span class="attribute">list-style-type</span> none</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.toc-child</span></span><br><span class="line">    <span class="attribute">margin-left</span> <span class="number">1em</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="加入-Google-Analytics"><a href="#加入-Google-Analytics" class="headerlink" title="加入 Google Analytics"></a>加入 Google Analytics</h3><ol><li>先到 <a href="https://www.google.com.tw/intl/zh-TW/analytics/">Google Analytics</a> 註冊取得追蹤編號</li><li>修改 <code>themes/&lt;主題名稱&gt;/_config.yml</code>，找到 <code>google_analytics</code>  後，將追蹤編號貼上即可</li></ol><h3 id="加入-sitemap"><a href="#加入-sitemap" class="headerlink" title="加入 sitemap"></a>加入 sitemap</h3><p>「Sitemap」是一種檔案，可以在其中列出網站上的網頁，讓其他搜尋引擎瞭解網站內容架構，以更靈活的方式檢索網站。</p><ol><li>透過以下指令安裝 <a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a><br><code>$ npm install hexo-generator-sitemap --save</code></li><li>修改 <code>_config.yml</code> 加入以下選項<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure></li><li>重啟後連線至 <a href="#">http://localhost:4000/&lt;Blog 名稱&gt;/sitemap.xml</a> 即可看見 sitemap.xml 囉</li><li>提交你的 Sitemap</li></ol><ul><li><a href="https://www.google.com/webmasters/tools">Google 網站管理員工具</a></li><li><a href="http://www.bing.com/toolbox/webmaster">Yahoo 和 Bing 網站管理員工具</a></li><li><a href="http://zhanzhang.baidu.com/">百度站長平台</a></li><li><a href="http://zhanzhang.haosou.com/">360好搜站長平台</a></li></ul><h3 id="加入-RSS-Feed"><a href="#加入-RSS-Feed" class="headerlink" title="加入 RSS Feed"></a>加入 RSS Feed</h3><p>透過 RSS，讓別人訂閱你的文章</p><ol><li>透過以下指令安裝 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a><br><code>$ npm install hexo-generator-feed --save</code></li><li>修改 <code>_config.yml</code> 加入以下選項<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure></li><li>修改 <code>themes/&lt;主題名稱&gt;/layout/_partial/header.ejs</code>，將原本 <code>&lt;%- theme.rss %&gt;</code> 修改為 <code>&lt;%=url_for(theme.rss)%&gt;</code></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://wwssllabcd.github.io/blog/2014/12/22/how-to-install-hexo/">Hexo 安裝教學、心得筆記</a></li><li><a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/">为Hexo博客添加目录</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://longxdragon.github.io/2015/03/07/Hexo-GitHub-create-blog/">Hexo+GitHub创建博客及使用技巧</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 佈署</title>
      <link href="/blog/2016/08/09/how-to-deploy-to-git/"/>
      <url>/blog/2016/08/09/how-to-deploy-to-git/</url>
      
        <content type="html"><![CDATA[<p>接續上一篇 <a href="/blog/2016/08/08/how-to-install-hexo/" title="Hexo 安裝">Hexo 安裝</a></p><h3 id="認識-GitHub"><a href="#認識-GitHub" class="headerlink" title="認識 GitHub "></a>認識 GitHub <img src="/blog/2016/08/09/how-to-deploy-to-git/PEO-octocat-0.svg" class="inline" width="64"></h3><ul><li><a href="https://zh.wikipedia.org/zh-tw/GitHub">GitHub</a></li><li><a href="http://www.ithome.com.tw/news/95283">Git達人教你搞懂GitHub基礎觀念</a></li></ul><h3 id="建立-github-io"><a href="#建立-github-io" class="headerlink" title="建立 github.io"></a>建立 github.io</h3><ul><li><a href="https://help.github.com/articles/creating-project-pages-manually/">Creating Project Pages manually</a><br>主要目的為替你的 repository 建立一個名為 <code>gh-pages</code> 的 branch</li></ul><p>小弟規劃如下 <img src="/blog/2016/08/09/how-to-deploy-to-git/branch.jpg" class="inline"></p><ul><li>master：用來放 Hexo 相關檔案</li><li>gh-pages：用來放 Hexo 產出之靜態網頁，也就是 Blog</li></ul><h3 id="佈署至-GitHub"><a href="#佈署至-GitHub" class="headerlink" title="佈署至 GitHub"></a>佈署至 GitHub</h3><ol><li>手動佈署<br> 下列其中一個指令，皆可產生靜態網頁，再自行 commit &amps; push 到 gh-pages <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li>產生完檔案後佈署 (自動化很棒吧XD)<ol><li>使用 NPM 安裝 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><br><code>npm install hexo-deployer-git --save</code></li><li>修改 <code>_config.yml</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/Coffee0127/blog.git  // 前一步開的 repository git url</span><br><span class="line">branch: gh-pages  // github.io</span><br><span class="line">message:          // 預設值為：Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure></li><li>佈署指令<br> 下列的其中一個指令，皆可讓 Hexo 在建立完畢後自動佈署至 GitHub，兩個指令的作用是相同的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://blog.ivanwei.co/zh-tw/2015-10-11-build-blog-by-hexojs/">[Hexo] Gtihub 上架 Blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 安裝</title>
      <link href="/blog/2016/08/08/how-to-install-hexo/"/>
      <url>/blog/2016/08/08/how-to-install-hexo/</url>
      
        <content type="html"><![CDATA[<div style="font-size: 24px;padding-top: 20px;font-style: italic;">“取之於社會，用之於社會”</div><p>從土木工程轉行 Key-in 人員也三年多了，現在才開始寫 Blog 會不會太慢 (￣□￣|||)a</p><p>一來是寫下在這行打滾的心得，做個里程碑，<br>二來是希望他日若有人遇到一樣問題，能夠幫上忙。(找到的資料是繁體中文不是很親切嗎 ㄟ(￣▽￣ㄟ))</p><p>選用 GitHub 理由：容量無限啊XD<br><span style="padding-left: 8.5em"><del>(絕對不是有自己的 domain name 是件很 cooooooooooooool 的事)</del></span><br>選用 Hexo 理由：透過 <a href="http://markdown.tw/">MarkDown</a> 的簡單語法即可撰寫出有層次網頁！<br><span style="padding-left: 8em">(另一個理由就是我想熟悉他的語法….XD)</span></p><p>因此第一篇 Blog，不免俗就是簡單搭建 Hexo 並且佈署至 GitHub 上來個 Hello World 一下。</p><hr><h3 id="前置安裝"><a href="#前置安裝" class="headerlink" title="前置安裝"></a>前置安裝</h3><p>開始之前，我們需先確認電腦有安裝以下環境</p><ul><li><a href="http://nodejs.org/">Node.js</a></li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h3><p>安裝好 Node.js 後，即可透過 <code>npm</code> 方式快速安裝 hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="建立-Hexo"><a href="#建立-Hexo" class="headerlink" title="建立 Hexo"></a>建立 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>建立完成後，專案資料夾會有下列檔案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├─ _config.yml    // hexo 設定檔</span><br><span class="line">├─ package.json   // Node.js 相依設定檔</span><br><span class="line">├─ node_modules   // Node.js 模組</span><br><span class="line">├─ scaffolds      // Blog 文章 layout</span><br><span class="line">├─ source</span><br><span class="line">│　　└─ _posts    // Blog 文章</span><br><span class="line">└─ themes         // Hexo 主題</span><br><span class="line">　　 └─ landscape</span><br></pre></td></tr></table></figure><h3 id="啟動-Hexo-Server"><a href="#啟動-Hexo-Server" class="headerlink" title="啟動 Hexo Server"></a>啟動 Hexo Server</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server [-p][-s][-l]</span><br><span class="line">or</span><br><span class="line">$ hexo s [-p][-s][-l]</span><br></pre></td></tr></table></figure><table><thead><tr><th>選項</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>覆蓋連接埠設定，預設 4000</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用靜態檔案</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>啟動記錄器，或覆蓋記錄格式</td></tr><tr><td>連線至 <a href="http://localhost:4000/">http://localhost:4000</a> 查看，就可以看到第一篇 Hello World 文章</td><td></td></tr></tbody></table><h3 id="自動刷新-Optional"><a href="#自動刷新-Optional" class="headerlink" title="自動刷新 (Optional)"></a>自動刷新 (Optional)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-browsersync --save</span><br></pre></td></tr></table></figure><h3 id="建立檔案"><a href="#建立檔案" class="headerlink" title="建立檔案"></a>建立檔案</h3><p>接下來我們要建立自己的文章，輸入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">or</span><br><span class="line">$ hexo n [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p><code>hexo new FirstBlog</code> 在 <code>source</code> 資料夾下即建立 <code>FirstBlog.md</code> 檔案，就可以開始編寫 Blog 囉</p><h3 id="設定檔-config-yml"><a href="#設定檔-config-yml" class="headerlink" title="設定檔 _config.yml"></a>設定檔 _config.yml</h3><p>Hexo 分兩個設定檔，這邊講的是根目錄下的 <code>_config.yml</code>，而非主題下的</p><h4 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment"># 網站主標題</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment"># 網站副標題</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment"># 用於產生 &lt;meta property=&quot;og:description&quot;&gt; 標籤</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 網站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment"># 網站語言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment"># 網站時區，預設使用電腦時區</span></span><br></pre></td></tr></table></figure><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://coffee0127.github.io/blog</span>  <span class="comment">#網站的網址</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>    <span class="comment"># 文章永久連結的格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>                     <span class="comment"># 永久連結中各區段的預設值，小弟沒試過XD</span></span><br></pre></td></tr></table></figure><h4 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h4><p>這邊僅針對 <code>new_post_name</code> 稍作說明，<code>new_post_name</code> 是新文章的檔案名稱，預設是 <code>:title.md</code>。<br>小弟將其修改為 <code>:year-:month-:day-:title.md</code>，將其修改為 <code>年-月-日-標題.md</code>，以日期為檔名，方便文章管理。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure><p>其他說明可再參考官網 <a href="https://hexo.io/docs/configuration.html">Configuration</a></p><p>接著佈署至 GitHub 請見下一篇 <a href="/blog/2016/08/09/how-to-deploy-to-git/" title="Hexo 佈署">Hexo 佈署</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://hexo.io/">Hexo</a></li><li><a href="https://wsgzao.github.io/post/hexo-guide/">使用GitHub和Hexo搭建免费静态Blog</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
